/**
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import io.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AlleleMatrixDetails".equalsIgnoreCase(className)) {
      return new TypeToken<List<AlleleMatrixDetails>>(){}.getType();
    }
    
    if ("AlleleMatrixDetailsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<AlleleMatrixDetailsResponse>>(){}.getType();
    }
    
    if ("AlleleMatrixSearchRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<AlleleMatrixSearchRequest>>(){}.getType();
    }
    
    if ("AlleleMatrixValues".equalsIgnoreCase(className)) {
      return new TypeToken<List<AlleleMatrixValues>>(){}.getType();
    }
    
    if ("AlleleMatrixValuesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<AlleleMatrixValuesResponse>>(){}.getType();
    }
    
    if ("BreedingMethod".equalsIgnoreCase(className)) {
      return new TypeToken<List<BreedingMethod>>(){}.getType();
    }
    
    if ("BreedingMethodResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<BreedingMethodResponse>>(){}.getType();
    }
    
    if ("BreedingMethodsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<BreedingMethodsResponse>>(){}.getType();
    }
    
    if ("BreedingMethodsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<BreedingMethodsResponseResult>>(){}.getType();
    }
    
    if ("Call".equalsIgnoreCase(className)) {
      return new TypeToken<List<Call>>(){}.getType();
    }
    
    if ("CallsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<CallsResponse>>(){}.getType();
    }
    
    if ("CallsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<CallsResponseResult>>(){}.getType();
    }
    
    if ("CommonCropNamesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<CommonCropNamesResponse>>(){}.getType();
    }
    
    if ("CommonCropNamesResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<CommonCropNamesResponseResult>>(){}.getType();
    }
    
    if ("Contact".equalsIgnoreCase(className)) {
      return new TypeToken<List<Contact>>(){}.getType();
    }
    
    if ("DataLink".equalsIgnoreCase(className)) {
      return new TypeToken<List<DataLink>>(){}.getType();
    }
    
    if ("GenomeMap".equalsIgnoreCase(className)) {
      return new TypeToken<List<GenomeMap>>(){}.getType();
    }
    
    if ("GenomeMapsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<GenomeMapsResponse>>(){}.getType();
    }
    
    if ("GenomeMapsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<GenomeMapsResponseResult>>(){}.getType();
    }
    
    if ("Germplasm".equalsIgnoreCase(className)) {
      return new TypeToken<List<Germplasm>>(){}.getType();
    }
    
    if ("GermplasmAttribute".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmAttribute>>(){}.getType();
    }
    
    if ("GermplasmAttributeCategoriesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmAttributeCategoriesResponse>>(){}.getType();
    }
    
    if ("GermplasmAttributeCategoriesResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmAttributeCategoriesResponseResult>>(){}.getType();
    }
    
    if ("GermplasmAttributeCategory".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmAttributeCategory>>(){}.getType();
    }
    
    if ("GermplasmAttributeDef".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmAttributeDef>>(){}.getType();
    }
    
    if ("GermplasmAttributeDefsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmAttributeDefsResponse>>(){}.getType();
    }
    
    if ("GermplasmAttributeDefsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmAttributeDefsResponseResult>>(){}.getType();
    }
    
    if ("GermplasmAttributeList".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmAttributeList>>(){}.getType();
    }
    
    if ("GermplasmAttributeListResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmAttributeListResponse>>(){}.getType();
    }
    
    if ("GermplasmDonors".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmDonors>>(){}.getType();
    }
    
    if ("GermplasmMarkerprofilesList".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmMarkerprofilesList>>(){}.getType();
    }
    
    if ("GermplasmMarkerprofilesListResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmMarkerprofilesListResponse>>(){}.getType();
    }
    
    if ("GermplasmResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmResponse>>(){}.getType();
    }
    
    if ("GermplasmResponse1".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmResponse1>>(){}.getType();
    }
    
    if ("GermplasmResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmResponseResult>>(){}.getType();
    }
    
    if ("GermplasmSearchRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmSearchRequest>>(){}.getType();
    }
    
    if ("GermplasmSummary".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmSummary>>(){}.getType();
    }
    
    if ("GermplasmSummaryList".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmSummaryList>>(){}.getType();
    }
    
    if ("GermplasmSummaryListResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<GermplasmSummaryListResponse>>(){}.getType();
    }
    
    if ("LinkageGroup".equalsIgnoreCase(className)) {
      return new TypeToken<List<LinkageGroup>>(){}.getType();
    }
    
    if ("Location".equalsIgnoreCase(className)) {
      return new TypeToken<List<Location>>(){}.getType();
    }
    
    if ("LocationResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<LocationResponse>>(){}.getType();
    }
    
    if ("LocationsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<LocationsResponse>>(){}.getType();
    }
    
    if ("LocationsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<LocationsResponseResult>>(){}.getType();
    }
    
    if ("MapDetails".equalsIgnoreCase(className)) {
      return new TypeToken<List<MapDetails>>(){}.getType();
    }
    
    if ("MapDetailsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<MapDetailsResponse>>(){}.getType();
    }
    
    if ("Marker".equalsIgnoreCase(className)) {
      return new TypeToken<List<Marker>>(){}.getType();
    }
    
    if ("MarkerProfile".equalsIgnoreCase(className)) {
      return new TypeToken<List<MarkerProfile>>(){}.getType();
    }
    
    if ("MarkerProfileDescription".equalsIgnoreCase(className)) {
      return new TypeToken<List<MarkerProfileDescription>>(){}.getType();
    }
    
    if ("MarkerProfileDescriptionsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<MarkerProfileDescriptionsResponse>>(){}.getType();
    }
    
    if ("MarkerProfileDescriptionsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<MarkerProfileDescriptionsResponseResult>>(){}.getType();
    }
    
    if ("MarkerProfilesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<MarkerProfilesResponse>>(){}.getType();
    }
    
    if ("MarkerResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<MarkerResponse>>(){}.getType();
    }
    
    if ("MarkerSummaryLinkageGroup".equalsIgnoreCase(className)) {
      return new TypeToken<List<MarkerSummaryLinkageGroup>>(){}.getType();
    }
    
    if ("MarkerSummaryMap".equalsIgnoreCase(className)) {
      return new TypeToken<List<MarkerSummaryMap>>(){}.getType();
    }
    
    if ("MarkersResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<MarkersResponse>>(){}.getType();
    }
    
    if ("MarkersResponse1".equalsIgnoreCase(className)) {
      return new TypeToken<List<MarkersResponse1>>(){}.getType();
    }
    
    if ("MarkersResponse1Result".equalsIgnoreCase(className)) {
      return new TypeToken<List<MarkersResponse1Result>>(){}.getType();
    }
    
    if ("MarkersResponse2".equalsIgnoreCase(className)) {
      return new TypeToken<List<MarkersResponse2>>(){}.getType();
    }
    
    if ("MarkersResponse2Result".equalsIgnoreCase(className)) {
      return new TypeToken<List<MarkersResponse2Result>>(){}.getType();
    }
    
    if ("MarkersResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<MarkersResponseResult>>(){}.getType();
    }
    
    if ("MarkersSearchRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<MarkersSearchRequest>>(){}.getType();
    }
    
    if ("Metadata".equalsIgnoreCase(className)) {
      return new TypeToken<List<Metadata>>(){}.getType();
    }
    
    if ("MetadataPagination".equalsIgnoreCase(className)) {
      return new TypeToken<List<MetadataPagination>>(){}.getType();
    }
    
    if ("Method".equalsIgnoreCase(className)) {
      return new TypeToken<List<Method>>(){}.getType();
    }
    
    if ("NewObservationDbIds".equalsIgnoreCase(className)) {
      return new TypeToken<List<NewObservationDbIds>>(){}.getType();
    }
    
    if ("NewObservationDbIdsObservations".equalsIgnoreCase(className)) {
      return new TypeToken<List<NewObservationDbIdsObservations>>(){}.getType();
    }
    
    if ("NewObservationDbIdsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<NewObservationDbIdsResponse>>(){}.getType();
    }
    
    if ("NewObservationUnitDbIds".equalsIgnoreCase(className)) {
      return new TypeToken<List<NewObservationUnitDbIds>>(){}.getType();
    }
    
    if ("NewObservationUnitDbIdsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<NewObservationUnitDbIdsResponse>>(){}.getType();
    }
    
    if ("NewObservationUnitRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<NewObservationUnitRequest>>(){}.getType();
    }
    
    if ("NewObservationsRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<NewObservationsRequest>>(){}.getType();
    }
    
    if ("NewObservationsRequestDeprecated".equalsIgnoreCase(className)) {
      return new TypeToken<List<NewObservationsRequestDeprecated>>(){}.getType();
    }
    
    if ("NewObservationsRequestDeprecatedData".equalsIgnoreCase(className)) {
      return new TypeToken<List<NewObservationsRequestDeprecatedData>>(){}.getType();
    }
    
    if ("NewObservationsRequestObservations".equalsIgnoreCase(className)) {
      return new TypeToken<List<NewObservationsRequestObservations>>(){}.getType();
    }
    
    if ("NewObservationsRequestWrapperDeprecated".equalsIgnoreCase(className)) {
      return new TypeToken<List<NewObservationsRequestWrapperDeprecated>>(){}.getType();
    }
    
    if ("NewObservationsTableRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<NewObservationsTableRequest>>(){}.getType();
    }
    
    if ("NewSampleDbId".equalsIgnoreCase(className)) {
      return new TypeToken<List<NewSampleDbId>>(){}.getType();
    }
    
    if ("NewSampleDbIdResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<NewSampleDbIdResult>>(){}.getType();
    }
    
    if ("Observation".equalsIgnoreCase(className)) {
      return new TypeToken<List<Observation>>(){}.getType();
    }
    
    if ("ObservationLevelsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationLevelsResponse>>(){}.getType();
    }
    
    if ("ObservationLevelsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationLevelsResponseResult>>(){}.getType();
    }
    
    if ("ObservationSummary".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationSummary>>(){}.getType();
    }
    
    if ("ObservationSummaryPhenotype".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationSummaryPhenotype>>(){}.getType();
    }
    
    if ("ObservationTreatment".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationTreatment>>(){}.getType();
    }
    
    if ("ObservationUnit".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationUnit>>(){}.getType();
    }
    
    if ("ObservationUnitPhenotype".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationUnitPhenotype>>(){}.getType();
    }
    
    if ("ObservationUnitPosition".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationUnitPosition>>(){}.getType();
    }
    
    if ("ObservationUnitPositionsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationUnitPositionsResponse>>(){}.getType();
    }
    
    if ("ObservationUnitPositionsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationUnitPositionsResponseResult>>(){}.getType();
    }
    
    if ("ObservationUnitStudy".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationUnitStudy>>(){}.getType();
    }
    
    if ("ObservationUnitXref".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationUnitXref>>(){}.getType();
    }
    
    if ("ObservationUnitsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationUnitsResponse>>(){}.getType();
    }
    
    if ("ObservationUnitsResponse1".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationUnitsResponse1>>(){}.getType();
    }
    
    if ("ObservationUnitsResponse1Result".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationUnitsResponse1Result>>(){}.getType();
    }
    
    if ("ObservationUnitsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationUnitsResponseResult>>(){}.getType();
    }
    
    if ("ObservationUnitsTableResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationUnitsTableResponse>>(){}.getType();
    }
    
    if ("ObservationUnitsTableResponse1".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationUnitsTableResponse1>>(){}.getType();
    }
    
    if ("ObservationVariable".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationVariable>>(){}.getType();
    }
    
    if ("ObservationVariableResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationVariableResponse>>(){}.getType();
    }
    
    if ("ObservationVariableSearchRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationVariableSearchRequest>>(){}.getType();
    }
    
    if ("ObservationVariablesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationVariablesResponse>>(){}.getType();
    }
    
    if ("ObservationVariablesResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationVariablesResponseResult>>(){}.getType();
    }
    
    if ("ObservationsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationsResponse>>(){}.getType();
    }
    
    if ("ObservationsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationsResponseResult>>(){}.getType();
    }
    
    if ("ObservationsTable".equalsIgnoreCase(className)) {
      return new TypeToken<List<ObservationsTable>>(){}.getType();
    }
    
    if ("OntologiesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<OntologiesResponse>>(){}.getType();
    }
    
    if ("OntologiesResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<OntologiesResponseResult>>(){}.getType();
    }
    
    if ("Ontology".equalsIgnoreCase(className)) {
      return new TypeToken<List<Ontology>>(){}.getType();
    }
    
    if ("Pedigree".equalsIgnoreCase(className)) {
      return new TypeToken<List<Pedigree>>(){}.getType();
    }
    
    if ("PedigreeResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<PedigreeResponse>>(){}.getType();
    }
    
    if ("PedigreeSiblings".equalsIgnoreCase(className)) {
      return new TypeToken<List<PedigreeSiblings>>(){}.getType();
    }
    
    if ("PhenotypesRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<PhenotypesRequest>>(){}.getType();
    }
    
    if ("PhenotypesRequestData".equalsIgnoreCase(className)) {
      return new TypeToken<List<PhenotypesRequestData>>(){}.getType();
    }
    
    if ("PhenotypesRequestObservation".equalsIgnoreCase(className)) {
      return new TypeToken<List<PhenotypesRequestObservation>>(){}.getType();
    }
    
    if ("PhenotypesSearchRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<PhenotypesSearchRequest>>(){}.getType();
    }
    
    if ("Progeny".equalsIgnoreCase(className)) {
      return new TypeToken<List<Progeny>>(){}.getType();
    }
    
    if ("ProgenyProgeny".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProgenyProgeny>>(){}.getType();
    }
    
    if ("ProgenyResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProgenyResponse>>(){}.getType();
    }
    
    if ("Program".equalsIgnoreCase(className)) {
      return new TypeToken<List<Program>>(){}.getType();
    }
    
    if ("ProgramsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProgramsResponse>>(){}.getType();
    }
    
    if ("ProgramsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProgramsResponseResult>>(){}.getType();
    }
    
    if ("ProgramsSearchRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProgramsSearchRequest>>(){}.getType();
    }
    
    if ("Sample".equalsIgnoreCase(className)) {
      return new TypeToken<List<Sample>>(){}.getType();
    }
    
    if ("SampleResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<SampleResponse>>(){}.getType();
    }
    
    if ("SampleSearchRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<SampleSearchRequest>>(){}.getType();
    }
    
    if ("SamplesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<SamplesResponse>>(){}.getType();
    }
    
    if ("SamplesResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<SamplesResponseResult>>(){}.getType();
    }
    
    if ("Scale".equalsIgnoreCase(className)) {
      return new TypeToken<List<Scale>>(){}.getType();
    }
    
    if ("Season".equalsIgnoreCase(className)) {
      return new TypeToken<List<Season>>(){}.getType();
    }
    
    if ("SeasonsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<SeasonsResponse>>(){}.getType();
    }
    
    if ("SeasonsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<SeasonsResponseResult>>(){}.getType();
    }
    
    if ("Status".equalsIgnoreCase(className)) {
      return new TypeToken<List<Status>>(){}.getType();
    }
    
    if ("StudiesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<StudiesResponse>>(){}.getType();
    }
    
    if ("StudiesResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<StudiesResponseResult>>(){}.getType();
    }
    
    if ("Study".equalsIgnoreCase(className)) {
      return new TypeToken<List<Study>>(){}.getType();
    }
    
    if ("StudyLastUpdate".equalsIgnoreCase(className)) {
      return new TypeToken<List<StudyLastUpdate>>(){}.getType();
    }
    
    if ("StudyLayoutRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<StudyLayoutRequest>>(){}.getType();
    }
    
    if ("StudyLayoutRequestLayout".equalsIgnoreCase(className)) {
      return new TypeToken<List<StudyLayoutRequestLayout>>(){}.getType();
    }
    
    if ("StudyObservationVariablesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<StudyObservationVariablesResponse>>(){}.getType();
    }
    
    if ("StudyObservationVariablesResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<StudyObservationVariablesResponseResult>>(){}.getType();
    }
    
    if ("StudyResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<StudyResponse>>(){}.getType();
    }
    
    if ("StudySearchRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<StudySearchRequest>>(){}.getType();
    }
    
    if ("StudySummary".equalsIgnoreCase(className)) {
      return new TypeToken<List<StudySummary>>(){}.getType();
    }
    
    if ("StudyType".equalsIgnoreCase(className)) {
      return new TypeToken<List<StudyType>>(){}.getType();
    }
    
    if ("StudyTypesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<StudyTypesResponse>>(){}.getType();
    }
    
    if ("StudyTypesResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<StudyTypesResponseResult>>(){}.getType();
    }
    
    if ("StudyobservationsTableResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<StudyobservationsTableResponse>>(){}.getType();
    }
    
    if ("TaxonID".equalsIgnoreCase(className)) {
      return new TypeToken<List<TaxonID>>(){}.getType();
    }
    
    if ("Trait".equalsIgnoreCase(className)) {
      return new TypeToken<List<Trait>>(){}.getType();
    }
    
    if ("TraitResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<TraitResponse>>(){}.getType();
    }
    
    if ("TraitSummary".equalsIgnoreCase(className)) {
      return new TypeToken<List<TraitSummary>>(){}.getType();
    }
    
    if ("TraitsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<TraitsResponse>>(){}.getType();
    }
    
    if ("TraitsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<TraitsResponseResult>>(){}.getType();
    }
    
    if ("Trial".equalsIgnoreCase(className)) {
      return new TypeToken<List<Trial>>(){}.getType();
    }
    
    if ("TrialDatasetAuthorship".equalsIgnoreCase(className)) {
      return new TypeToken<List<TrialDatasetAuthorship>>(){}.getType();
    }
    
    if ("TrialResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<TrialResponse>>(){}.getType();
    }
    
    if ("TrialStudies".equalsIgnoreCase(className)) {
      return new TypeToken<List<TrialStudies>>(){}.getType();
    }
    
    if ("TrialSummary".equalsIgnoreCase(className)) {
      return new TypeToken<List<TrialSummary>>(){}.getType();
    }
    
    if ("TrialsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<TrialsResponse>>(){}.getType();
    }
    
    if ("TrialsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<TrialsResponseResult>>(){}.getType();
    }
    
    if ("ValidValues".equalsIgnoreCase(className)) {
      return new TypeToken<List<ValidValues>>(){}.getType();
    }
    
    if ("VendorPlate".equalsIgnoreCase(className)) {
      return new TypeToken<List<VendorPlate>>(){}.getType();
    }
    
    if ("VendorPlateFile".equalsIgnoreCase(className)) {
      return new TypeToken<List<VendorPlateFile>>(){}.getType();
    }
    
    if ("VendorPlateRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<VendorPlateRequest>>(){}.getType();
    }
    
    if ("VendorPlateRequestPlates".equalsIgnoreCase(className)) {
      return new TypeToken<List<VendorPlateRequestPlates>>(){}.getType();
    }
    
    if ("VendorPlateRequestSamples".equalsIgnoreCase(className)) {
      return new TypeToken<List<VendorPlateRequestSamples>>(){}.getType();
    }
    
    if ("VendorPlateResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<VendorPlateResponse>>(){}.getType();
    }
    
    if ("VendorPlateSearchRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<VendorPlateSearchRequest>>(){}.getType();
    }
    
    if ("VendorPlatesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<VendorPlatesResponse>>(){}.getType();
    }
    
    if ("VendorPlatesResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<VendorPlatesResponseResult>>(){}.getType();
    }
    
    if ("VendorSample".equalsIgnoreCase(className)) {
      return new TypeToken<List<VendorSample>>(){}.getType();
    }
    
    if ("VendorSpecification".equalsIgnoreCase(className)) {
      return new TypeToken<List<VendorSpecification>>(){}.getType();
    }
    
    if ("VendorSpecificationPlatform".equalsIgnoreCase(className)) {
      return new TypeToken<List<VendorSpecificationPlatform>>(){}.getType();
    }
    
    if ("VendorSpecificationPlatformDeliverables".equalsIgnoreCase(className)) {
      return new TypeToken<List<VendorSpecificationPlatformDeliverables>>(){}.getType();
    }
    
    if ("VendorSpecificationPlatformStatuses".equalsIgnoreCase(className)) {
      return new TypeToken<List<VendorSpecificationPlatformStatuses>>(){}.getType();
    }
    
    if ("VendorSpecificationReferenceSystem".equalsIgnoreCase(className)) {
      return new TypeToken<List<VendorSpecificationReferenceSystem>>(){}.getType();
    }
    
    if ("VendorSpecificationResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<VendorSpecificationResponse>>(){}.getType();
    }
    
    if ("VendorSpecificationStandardRequirement".equalsIgnoreCase(className)) {
      return new TypeToken<List<VendorSpecificationStandardRequirement>>(){}.getType();
    }
    
    if ("VendorSpecificationStandardRequirementBlankWellPosition".equalsIgnoreCase(className)) {
      return new TypeToken<List<VendorSpecificationStandardRequirementBlankWellPosition>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AlleleMatrixDetails".equalsIgnoreCase(className)) {
      return new TypeToken<AlleleMatrixDetails>(){}.getType();
    }
    
    if ("AlleleMatrixDetailsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<AlleleMatrixDetailsResponse>(){}.getType();
    }
    
    if ("AlleleMatrixSearchRequest".equalsIgnoreCase(className)) {
      return new TypeToken<AlleleMatrixSearchRequest>(){}.getType();
    }
    
    if ("AlleleMatrixValues".equalsIgnoreCase(className)) {
      return new TypeToken<AlleleMatrixValues>(){}.getType();
    }
    
    if ("AlleleMatrixValuesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<AlleleMatrixValuesResponse>(){}.getType();
    }
    
    if ("BreedingMethod".equalsIgnoreCase(className)) {
      return new TypeToken<BreedingMethod>(){}.getType();
    }
    
    if ("BreedingMethodResponse".equalsIgnoreCase(className)) {
      return new TypeToken<BreedingMethodResponse>(){}.getType();
    }
    
    if ("BreedingMethodsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<BreedingMethodsResponse>(){}.getType();
    }
    
    if ("BreedingMethodsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<BreedingMethodsResponseResult>(){}.getType();
    }
    
    if ("Call".equalsIgnoreCase(className)) {
      return new TypeToken<Call>(){}.getType();
    }
    
    if ("CallsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<CallsResponse>(){}.getType();
    }
    
    if ("CallsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<CallsResponseResult>(){}.getType();
    }
    
    if ("CommonCropNamesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<CommonCropNamesResponse>(){}.getType();
    }
    
    if ("CommonCropNamesResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<CommonCropNamesResponseResult>(){}.getType();
    }
    
    if ("Contact".equalsIgnoreCase(className)) {
      return new TypeToken<Contact>(){}.getType();
    }
    
    if ("DataLink".equalsIgnoreCase(className)) {
      return new TypeToken<DataLink>(){}.getType();
    }
    
    if ("GenomeMap".equalsIgnoreCase(className)) {
      return new TypeToken<GenomeMap>(){}.getType();
    }
    
    if ("GenomeMapsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<GenomeMapsResponse>(){}.getType();
    }
    
    if ("GenomeMapsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<GenomeMapsResponseResult>(){}.getType();
    }
    
    if ("Germplasm".equalsIgnoreCase(className)) {
      return new TypeToken<Germplasm>(){}.getType();
    }
    
    if ("GermplasmAttribute".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmAttribute>(){}.getType();
    }
    
    if ("GermplasmAttributeCategoriesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmAttributeCategoriesResponse>(){}.getType();
    }
    
    if ("GermplasmAttributeCategoriesResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmAttributeCategoriesResponseResult>(){}.getType();
    }
    
    if ("GermplasmAttributeCategory".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmAttributeCategory>(){}.getType();
    }
    
    if ("GermplasmAttributeDef".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmAttributeDef>(){}.getType();
    }
    
    if ("GermplasmAttributeDefsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmAttributeDefsResponse>(){}.getType();
    }
    
    if ("GermplasmAttributeDefsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmAttributeDefsResponseResult>(){}.getType();
    }
    
    if ("GermplasmAttributeList".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmAttributeList>(){}.getType();
    }
    
    if ("GermplasmAttributeListResponse".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmAttributeListResponse>(){}.getType();
    }
    
    if ("GermplasmDonors".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmDonors>(){}.getType();
    }
    
    if ("GermplasmMarkerprofilesList".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmMarkerprofilesList>(){}.getType();
    }
    
    if ("GermplasmMarkerprofilesListResponse".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmMarkerprofilesListResponse>(){}.getType();
    }
    
    if ("GermplasmResponse".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmResponse>(){}.getType();
    }
    
    if ("GermplasmResponse1".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmResponse1>(){}.getType();
    }
    
    if ("GermplasmResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmResponseResult>(){}.getType();
    }
    
    if ("GermplasmSearchRequest".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmSearchRequest>(){}.getType();
    }
    
    if ("GermplasmSummary".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmSummary>(){}.getType();
    }
    
    if ("GermplasmSummaryList".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmSummaryList>(){}.getType();
    }
    
    if ("GermplasmSummaryListResponse".equalsIgnoreCase(className)) {
      return new TypeToken<GermplasmSummaryListResponse>(){}.getType();
    }
    
    if ("LinkageGroup".equalsIgnoreCase(className)) {
      return new TypeToken<LinkageGroup>(){}.getType();
    }
    
    if ("Location".equalsIgnoreCase(className)) {
      return new TypeToken<Location>(){}.getType();
    }
    
    if ("LocationResponse".equalsIgnoreCase(className)) {
      return new TypeToken<LocationResponse>(){}.getType();
    }
    
    if ("LocationsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<LocationsResponse>(){}.getType();
    }
    
    if ("LocationsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<LocationsResponseResult>(){}.getType();
    }
    
    if ("MapDetails".equalsIgnoreCase(className)) {
      return new TypeToken<MapDetails>(){}.getType();
    }
    
    if ("MapDetailsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<MapDetailsResponse>(){}.getType();
    }
    
    if ("Marker".equalsIgnoreCase(className)) {
      return new TypeToken<Marker>(){}.getType();
    }
    
    if ("MarkerProfile".equalsIgnoreCase(className)) {
      return new TypeToken<MarkerProfile>(){}.getType();
    }
    
    if ("MarkerProfileDescription".equalsIgnoreCase(className)) {
      return new TypeToken<MarkerProfileDescription>(){}.getType();
    }
    
    if ("MarkerProfileDescriptionsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<MarkerProfileDescriptionsResponse>(){}.getType();
    }
    
    if ("MarkerProfileDescriptionsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<MarkerProfileDescriptionsResponseResult>(){}.getType();
    }
    
    if ("MarkerProfilesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<MarkerProfilesResponse>(){}.getType();
    }
    
    if ("MarkerResponse".equalsIgnoreCase(className)) {
      return new TypeToken<MarkerResponse>(){}.getType();
    }
    
    if ("MarkerSummaryLinkageGroup".equalsIgnoreCase(className)) {
      return new TypeToken<MarkerSummaryLinkageGroup>(){}.getType();
    }
    
    if ("MarkerSummaryMap".equalsIgnoreCase(className)) {
      return new TypeToken<MarkerSummaryMap>(){}.getType();
    }
    
    if ("MarkersResponse".equalsIgnoreCase(className)) {
      return new TypeToken<MarkersResponse>(){}.getType();
    }
    
    if ("MarkersResponse1".equalsIgnoreCase(className)) {
      return new TypeToken<MarkersResponse1>(){}.getType();
    }
    
    if ("MarkersResponse1Result".equalsIgnoreCase(className)) {
      return new TypeToken<MarkersResponse1Result>(){}.getType();
    }
    
    if ("MarkersResponse2".equalsIgnoreCase(className)) {
      return new TypeToken<MarkersResponse2>(){}.getType();
    }
    
    if ("MarkersResponse2Result".equalsIgnoreCase(className)) {
      return new TypeToken<MarkersResponse2Result>(){}.getType();
    }
    
    if ("MarkersResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<MarkersResponseResult>(){}.getType();
    }
    
    if ("MarkersSearchRequest".equalsIgnoreCase(className)) {
      return new TypeToken<MarkersSearchRequest>(){}.getType();
    }
    
    if ("Metadata".equalsIgnoreCase(className)) {
      return new TypeToken<Metadata>(){}.getType();
    }
    
    if ("MetadataPagination".equalsIgnoreCase(className)) {
      return new TypeToken<MetadataPagination>(){}.getType();
    }
    
    if ("Method".equalsIgnoreCase(className)) {
      return new TypeToken<Method>(){}.getType();
    }
    
    if ("NewObservationDbIds".equalsIgnoreCase(className)) {
      return new TypeToken<NewObservationDbIds>(){}.getType();
    }
    
    if ("NewObservationDbIdsObservations".equalsIgnoreCase(className)) {
      return new TypeToken<NewObservationDbIdsObservations>(){}.getType();
    }
    
    if ("NewObservationDbIdsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<NewObservationDbIdsResponse>(){}.getType();
    }
    
    if ("NewObservationUnitDbIds".equalsIgnoreCase(className)) {
      return new TypeToken<NewObservationUnitDbIds>(){}.getType();
    }
    
    if ("NewObservationUnitDbIdsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<NewObservationUnitDbIdsResponse>(){}.getType();
    }
    
    if ("NewObservationUnitRequest".equalsIgnoreCase(className)) {
      return new TypeToken<NewObservationUnitRequest>(){}.getType();
    }
    
    if ("NewObservationsRequest".equalsIgnoreCase(className)) {
      return new TypeToken<NewObservationsRequest>(){}.getType();
    }
    
    if ("NewObservationsRequestDeprecated".equalsIgnoreCase(className)) {
      return new TypeToken<NewObservationsRequestDeprecated>(){}.getType();
    }
    
    if ("NewObservationsRequestDeprecatedData".equalsIgnoreCase(className)) {
      return new TypeToken<NewObservationsRequestDeprecatedData>(){}.getType();
    }
    
    if ("NewObservationsRequestObservations".equalsIgnoreCase(className)) {
      return new TypeToken<NewObservationsRequestObservations>(){}.getType();
    }
    
    if ("NewObservationsRequestWrapperDeprecated".equalsIgnoreCase(className)) {
      return new TypeToken<NewObservationsRequestWrapperDeprecated>(){}.getType();
    }
    
    if ("NewObservationsTableRequest".equalsIgnoreCase(className)) {
      return new TypeToken<NewObservationsTableRequest>(){}.getType();
    }
    
    if ("NewSampleDbId".equalsIgnoreCase(className)) {
      return new TypeToken<NewSampleDbId>(){}.getType();
    }
    
    if ("NewSampleDbIdResult".equalsIgnoreCase(className)) {
      return new TypeToken<NewSampleDbIdResult>(){}.getType();
    }
    
    if ("Observation".equalsIgnoreCase(className)) {
      return new TypeToken<Observation>(){}.getType();
    }
    
    if ("ObservationLevelsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationLevelsResponse>(){}.getType();
    }
    
    if ("ObservationLevelsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationLevelsResponseResult>(){}.getType();
    }
    
    if ("ObservationSummary".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationSummary>(){}.getType();
    }
    
    if ("ObservationSummaryPhenotype".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationSummaryPhenotype>(){}.getType();
    }
    
    if ("ObservationTreatment".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationTreatment>(){}.getType();
    }
    
    if ("ObservationUnit".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationUnit>(){}.getType();
    }
    
    if ("ObservationUnitPhenotype".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationUnitPhenotype>(){}.getType();
    }
    
    if ("ObservationUnitPosition".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationUnitPosition>(){}.getType();
    }
    
    if ("ObservationUnitPositionsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationUnitPositionsResponse>(){}.getType();
    }
    
    if ("ObservationUnitPositionsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationUnitPositionsResponseResult>(){}.getType();
    }
    
    if ("ObservationUnitStudy".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationUnitStudy>(){}.getType();
    }
    
    if ("ObservationUnitXref".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationUnitXref>(){}.getType();
    }
    
    if ("ObservationUnitsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationUnitsResponse>(){}.getType();
    }
    
    if ("ObservationUnitsResponse1".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationUnitsResponse1>(){}.getType();
    }
    
    if ("ObservationUnitsResponse1Result".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationUnitsResponse1Result>(){}.getType();
    }
    
    if ("ObservationUnitsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationUnitsResponseResult>(){}.getType();
    }
    
    if ("ObservationUnitsTableResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationUnitsTableResponse>(){}.getType();
    }
    
    if ("ObservationUnitsTableResponse1".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationUnitsTableResponse1>(){}.getType();
    }
    
    if ("ObservationVariable".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationVariable>(){}.getType();
    }
    
    if ("ObservationVariableResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationVariableResponse>(){}.getType();
    }
    
    if ("ObservationVariableSearchRequest".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationVariableSearchRequest>(){}.getType();
    }
    
    if ("ObservationVariablesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationVariablesResponse>(){}.getType();
    }
    
    if ("ObservationVariablesResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationVariablesResponseResult>(){}.getType();
    }
    
    if ("ObservationsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationsResponse>(){}.getType();
    }
    
    if ("ObservationsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationsResponseResult>(){}.getType();
    }
    
    if ("ObservationsTable".equalsIgnoreCase(className)) {
      return new TypeToken<ObservationsTable>(){}.getType();
    }
    
    if ("OntologiesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<OntologiesResponse>(){}.getType();
    }
    
    if ("OntologiesResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<OntologiesResponseResult>(){}.getType();
    }
    
    if ("Ontology".equalsIgnoreCase(className)) {
      return new TypeToken<Ontology>(){}.getType();
    }
    
    if ("Pedigree".equalsIgnoreCase(className)) {
      return new TypeToken<Pedigree>(){}.getType();
    }
    
    if ("PedigreeResponse".equalsIgnoreCase(className)) {
      return new TypeToken<PedigreeResponse>(){}.getType();
    }
    
    if ("PedigreeSiblings".equalsIgnoreCase(className)) {
      return new TypeToken<PedigreeSiblings>(){}.getType();
    }
    
    if ("PhenotypesRequest".equalsIgnoreCase(className)) {
      return new TypeToken<PhenotypesRequest>(){}.getType();
    }
    
    if ("PhenotypesRequestData".equalsIgnoreCase(className)) {
      return new TypeToken<PhenotypesRequestData>(){}.getType();
    }
    
    if ("PhenotypesRequestObservation".equalsIgnoreCase(className)) {
      return new TypeToken<PhenotypesRequestObservation>(){}.getType();
    }
    
    if ("PhenotypesSearchRequest".equalsIgnoreCase(className)) {
      return new TypeToken<PhenotypesSearchRequest>(){}.getType();
    }
    
    if ("Progeny".equalsIgnoreCase(className)) {
      return new TypeToken<Progeny>(){}.getType();
    }
    
    if ("ProgenyProgeny".equalsIgnoreCase(className)) {
      return new TypeToken<ProgenyProgeny>(){}.getType();
    }
    
    if ("ProgenyResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ProgenyResponse>(){}.getType();
    }
    
    if ("Program".equalsIgnoreCase(className)) {
      return new TypeToken<Program>(){}.getType();
    }
    
    if ("ProgramsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ProgramsResponse>(){}.getType();
    }
    
    if ("ProgramsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<ProgramsResponseResult>(){}.getType();
    }
    
    if ("ProgramsSearchRequest".equalsIgnoreCase(className)) {
      return new TypeToken<ProgramsSearchRequest>(){}.getType();
    }
    
    if ("Sample".equalsIgnoreCase(className)) {
      return new TypeToken<Sample>(){}.getType();
    }
    
    if ("SampleResponse".equalsIgnoreCase(className)) {
      return new TypeToken<SampleResponse>(){}.getType();
    }
    
    if ("SampleSearchRequest".equalsIgnoreCase(className)) {
      return new TypeToken<SampleSearchRequest>(){}.getType();
    }
    
    if ("SamplesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<SamplesResponse>(){}.getType();
    }
    
    if ("SamplesResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<SamplesResponseResult>(){}.getType();
    }
    
    if ("Scale".equalsIgnoreCase(className)) {
      return new TypeToken<Scale>(){}.getType();
    }
    
    if ("Season".equalsIgnoreCase(className)) {
      return new TypeToken<Season>(){}.getType();
    }
    
    if ("SeasonsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<SeasonsResponse>(){}.getType();
    }
    
    if ("SeasonsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<SeasonsResponseResult>(){}.getType();
    }
    
    if ("Status".equalsIgnoreCase(className)) {
      return new TypeToken<Status>(){}.getType();
    }
    
    if ("StudiesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<StudiesResponse>(){}.getType();
    }
    
    if ("StudiesResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<StudiesResponseResult>(){}.getType();
    }
    
    if ("Study".equalsIgnoreCase(className)) {
      return new TypeToken<Study>(){}.getType();
    }
    
    if ("StudyLastUpdate".equalsIgnoreCase(className)) {
      return new TypeToken<StudyLastUpdate>(){}.getType();
    }
    
    if ("StudyLayoutRequest".equalsIgnoreCase(className)) {
      return new TypeToken<StudyLayoutRequest>(){}.getType();
    }
    
    if ("StudyLayoutRequestLayout".equalsIgnoreCase(className)) {
      return new TypeToken<StudyLayoutRequestLayout>(){}.getType();
    }
    
    if ("StudyObservationVariablesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<StudyObservationVariablesResponse>(){}.getType();
    }
    
    if ("StudyObservationVariablesResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<StudyObservationVariablesResponseResult>(){}.getType();
    }
    
    if ("StudyResponse".equalsIgnoreCase(className)) {
      return new TypeToken<StudyResponse>(){}.getType();
    }
    
    if ("StudySearchRequest".equalsIgnoreCase(className)) {
      return new TypeToken<StudySearchRequest>(){}.getType();
    }
    
    if ("StudySummary".equalsIgnoreCase(className)) {
      return new TypeToken<StudySummary>(){}.getType();
    }
    
    if ("StudyType".equalsIgnoreCase(className)) {
      return new TypeToken<StudyType>(){}.getType();
    }
    
    if ("StudyTypesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<StudyTypesResponse>(){}.getType();
    }
    
    if ("StudyTypesResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<StudyTypesResponseResult>(){}.getType();
    }
    
    if ("StudyobservationsTableResponse".equalsIgnoreCase(className)) {
      return new TypeToken<StudyobservationsTableResponse>(){}.getType();
    }
    
    if ("TaxonID".equalsIgnoreCase(className)) {
      return new TypeToken<TaxonID>(){}.getType();
    }
    
    if ("Trait".equalsIgnoreCase(className)) {
      return new TypeToken<Trait>(){}.getType();
    }
    
    if ("TraitResponse".equalsIgnoreCase(className)) {
      return new TypeToken<TraitResponse>(){}.getType();
    }
    
    if ("TraitSummary".equalsIgnoreCase(className)) {
      return new TypeToken<TraitSummary>(){}.getType();
    }
    
    if ("TraitsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<TraitsResponse>(){}.getType();
    }
    
    if ("TraitsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<TraitsResponseResult>(){}.getType();
    }
    
    if ("Trial".equalsIgnoreCase(className)) {
      return new TypeToken<Trial>(){}.getType();
    }
    
    if ("TrialDatasetAuthorship".equalsIgnoreCase(className)) {
      return new TypeToken<TrialDatasetAuthorship>(){}.getType();
    }
    
    if ("TrialResponse".equalsIgnoreCase(className)) {
      return new TypeToken<TrialResponse>(){}.getType();
    }
    
    if ("TrialStudies".equalsIgnoreCase(className)) {
      return new TypeToken<TrialStudies>(){}.getType();
    }
    
    if ("TrialSummary".equalsIgnoreCase(className)) {
      return new TypeToken<TrialSummary>(){}.getType();
    }
    
    if ("TrialsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<TrialsResponse>(){}.getType();
    }
    
    if ("TrialsResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<TrialsResponseResult>(){}.getType();
    }
    
    if ("ValidValues".equalsIgnoreCase(className)) {
      return new TypeToken<ValidValues>(){}.getType();
    }
    
    if ("VendorPlate".equalsIgnoreCase(className)) {
      return new TypeToken<VendorPlate>(){}.getType();
    }
    
    if ("VendorPlateFile".equalsIgnoreCase(className)) {
      return new TypeToken<VendorPlateFile>(){}.getType();
    }
    
    if ("VendorPlateRequest".equalsIgnoreCase(className)) {
      return new TypeToken<VendorPlateRequest>(){}.getType();
    }
    
    if ("VendorPlateRequestPlates".equalsIgnoreCase(className)) {
      return new TypeToken<VendorPlateRequestPlates>(){}.getType();
    }
    
    if ("VendorPlateRequestSamples".equalsIgnoreCase(className)) {
      return new TypeToken<VendorPlateRequestSamples>(){}.getType();
    }
    
    if ("VendorPlateResponse".equalsIgnoreCase(className)) {
      return new TypeToken<VendorPlateResponse>(){}.getType();
    }
    
    if ("VendorPlateSearchRequest".equalsIgnoreCase(className)) {
      return new TypeToken<VendorPlateSearchRequest>(){}.getType();
    }
    
    if ("VendorPlatesResponse".equalsIgnoreCase(className)) {
      return new TypeToken<VendorPlatesResponse>(){}.getType();
    }
    
    if ("VendorPlatesResponseResult".equalsIgnoreCase(className)) {
      return new TypeToken<VendorPlatesResponseResult>(){}.getType();
    }
    
    if ("VendorSample".equalsIgnoreCase(className)) {
      return new TypeToken<VendorSample>(){}.getType();
    }
    
    if ("VendorSpecification".equalsIgnoreCase(className)) {
      return new TypeToken<VendorSpecification>(){}.getType();
    }
    
    if ("VendorSpecificationPlatform".equalsIgnoreCase(className)) {
      return new TypeToken<VendorSpecificationPlatform>(){}.getType();
    }
    
    if ("VendorSpecificationPlatformDeliverables".equalsIgnoreCase(className)) {
      return new TypeToken<VendorSpecificationPlatformDeliverables>(){}.getType();
    }
    
    if ("VendorSpecificationPlatformStatuses".equalsIgnoreCase(className)) {
      return new TypeToken<VendorSpecificationPlatformStatuses>(){}.getType();
    }
    
    if ("VendorSpecificationReferenceSystem".equalsIgnoreCase(className)) {
      return new TypeToken<VendorSpecificationReferenceSystem>(){}.getType();
    }
    
    if ("VendorSpecificationResponse".equalsIgnoreCase(className)) {
      return new TypeToken<VendorSpecificationResponse>(){}.getType();
    }
    
    if ("VendorSpecificationStandardRequirement".equalsIgnoreCase(className)) {
      return new TypeToken<VendorSpecificationStandardRequirement>(){}.getType();
    }
    
    if ("VendorSpecificationStandardRequirementBlankWellPosition".equalsIgnoreCase(className)) {
      return new TypeToken<VendorSpecificationStandardRequirementBlankWellPosition>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
