/**
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.client.model.PedigreeSiblings;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;
import java.io.Serializable;

@ApiModel(description = "")
public class Pedigree implements Serializable {
  
  @SerializedName("crossingPlan")
  private String crossingPlan = null;
  @SerializedName("crossingYear")
  private String crossingYear = null;
  @SerializedName("defaultDisplayName")
  private String defaultDisplayName = null;
  @SerializedName("familyCode")
  private String familyCode = null;
  @SerializedName("germplasmDbId")
  private String germplasmDbId = null;
  @SerializedName("parent1DbId")
  private String parent1DbId = null;
  @SerializedName("parent1Id")
  private String parent1Id = null;
  @SerializedName("parent1Name")
  private String parent1Name = null;
  public enum Parent1TypeEnum {
     MALE,  FEMALE,  SELF,  POPULATION, 
  };
  @SerializedName("parent1Type")
  private Parent1TypeEnum parent1Type = null;
  @SerializedName("parent2DbId")
  private String parent2DbId = null;
  @SerializedName("parent2Id")
  private String parent2Id = null;
  @SerializedName("parent2Name")
  private String parent2Name = null;
  public enum Parent2TypeEnum {
     MALE,  FEMALE,  SELF,  POPULATION, 
  };
  @SerializedName("parent2Type")
  private Parent2TypeEnum parent2Type = null;
  @SerializedName("pedigree")
  private String pedigree = null;
  @SerializedName("siblings")
  private List<PedigreeSiblings> siblings = null;

  /**
   * The crossing strategy used to generate this germplasm
   **/
  @ApiModelProperty(value = "The crossing strategy used to generate this germplasm")
  public String getCrossingPlan() {
    return crossingPlan;
  }
  public void setCrossingPlan(String crossingPlan) {
    this.crossingPlan = crossingPlan;
  }

  /**
   * The year the parents were originally crossed
   **/
  @ApiModelProperty(value = "The year the parents were originally crossed")
  public String getCrossingYear() {
    return crossingYear;
  }
  public void setCrossingYear(String crossingYear) {
    this.crossingYear = crossingYear;
  }

  /**
   * A human readable name for a germplasm
   **/
  @ApiModelProperty(value = "A human readable name for a germplasm")
  public String getDefaultDisplayName() {
    return defaultDisplayName;
  }
  public void setDefaultDisplayName(String defaultDisplayName) {
    this.defaultDisplayName = defaultDisplayName;
  }

  /**
   * The code representing the family
   **/
  @ApiModelProperty(value = "The code representing the family")
  public String getFamilyCode() {
    return familyCode;
  }
  public void setFamilyCode(String familyCode) {
    this.familyCode = familyCode;
  }

  /**
   *  The ID which uniquely identifies a germplasm
   **/
  @ApiModelProperty(value = " The ID which uniquely identifies a germplasm")
  public String getGermplasmDbId() {
    return germplasmDbId;
  }
  public void setGermplasmDbId(String germplasmDbId) {
    this.germplasmDbId = germplasmDbId;
  }

  /**
   * The germplasm DbId of the first parent of this germplasm
   **/
  @ApiModelProperty(value = "The germplasm DbId of the first parent of this germplasm")
  public String getParent1DbId() {
    return parent1DbId;
  }
  public void setParent1DbId(String parent1DbId) {
    this.parent1DbId = parent1DbId;
  }

  /**
   * **Deprecated** use parent1DbId
   **/
  @ApiModelProperty(value = "**Deprecated** use parent1DbId")
  public String getParent1Id() {
    return parent1Id;
  }
  public void setParent1Id(String parent1Id) {
    this.parent1Id = parent1Id;
  }

  /**
   * the human readable name of the first parent of this germplasm
   **/
  @ApiModelProperty(value = "the human readable name of the first parent of this germplasm")
  public String getParent1Name() {
    return parent1Name;
  }
  public void setParent1Name(String parent1Name) {
    this.parent1Name = parent1Name;
  }

  /**
   * The type of parent the first parent is. ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.
   **/
  @ApiModelProperty(value = "The type of parent the first parent is. ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.")
  public Parent1TypeEnum getParent1Type() {
    return parent1Type;
  }
  public void setParent1Type(Parent1TypeEnum parent1Type) {
    this.parent1Type = parent1Type;
  }

  /**
   * The germplasm DbId of the second parent of this germplasm
   **/
  @ApiModelProperty(value = "The germplasm DbId of the second parent of this germplasm")
  public String getParent2DbId() {
    return parent2DbId;
  }
  public void setParent2DbId(String parent2DbId) {
    this.parent2DbId = parent2DbId;
  }

  /**
   * **Deprecated** use parent2DbId
   **/
  @ApiModelProperty(value = "**Deprecated** use parent2DbId")
  public String getParent2Id() {
    return parent2Id;
  }
  public void setParent2Id(String parent2Id) {
    this.parent2Id = parent2Id;
  }

  /**
   * The human readable name of the second parent of this germplasm
   **/
  @ApiModelProperty(value = "The human readable name of the second parent of this germplasm")
  public String getParent2Name() {
    return parent2Name;
  }
  public void setParent2Name(String parent2Name) {
    this.parent2Name = parent2Name;
  }

  /**
   * The type of parent the second parent is. ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.
   **/
  @ApiModelProperty(value = "The type of parent the second parent is. ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.")
  public Parent2TypeEnum getParent2Type() {
    return parent2Type;
  }
  public void setParent2Type(Parent2TypeEnum parent2Type) {
    this.parent2Type = parent2Type;
  }

  /**
   * The string representation of the pedigree.
   **/
  @ApiModelProperty(value = "The string representation of the pedigree.")
  public String getPedigree() {
    return pedigree;
  }
  public void setPedigree(String pedigree) {
    this.pedigree = pedigree;
  }

  /**
   * List of sibling germplasm 
   **/
  @ApiModelProperty(value = "List of sibling germplasm ")
  public List<PedigreeSiblings> getSiblings() {
    return siblings;
  }
  public void setSiblings(List<PedigreeSiblings> siblings) {
    this.siblings = siblings;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pedigree pedigree = (Pedigree) o;
    return (this.crossingPlan == null ? pedigree.crossingPlan == null : this.crossingPlan.equals(pedigree.crossingPlan)) &&
        (this.crossingYear == null ? pedigree.crossingYear == null : this.crossingYear.equals(pedigree.crossingYear)) &&
        (this.defaultDisplayName == null ? pedigree.defaultDisplayName == null : this.defaultDisplayName.equals(pedigree.defaultDisplayName)) &&
        (this.familyCode == null ? pedigree.familyCode == null : this.familyCode.equals(pedigree.familyCode)) &&
        (this.germplasmDbId == null ? pedigree.germplasmDbId == null : this.germplasmDbId.equals(pedigree.germplasmDbId)) &&
        (this.parent1DbId == null ? pedigree.parent1DbId == null : this.parent1DbId.equals(pedigree.parent1DbId)) &&
        (this.parent1Id == null ? pedigree.parent1Id == null : this.parent1Id.equals(pedigree.parent1Id)) &&
        (this.parent1Name == null ? pedigree.parent1Name == null : this.parent1Name.equals(pedigree.parent1Name)) &&
        (this.parent1Type == null ? pedigree.parent1Type == null : this.parent1Type.equals(pedigree.parent1Type)) &&
        (this.parent2DbId == null ? pedigree.parent2DbId == null : this.parent2DbId.equals(pedigree.parent2DbId)) &&
        (this.parent2Id == null ? pedigree.parent2Id == null : this.parent2Id.equals(pedigree.parent2Id)) &&
        (this.parent2Name == null ? pedigree.parent2Name == null : this.parent2Name.equals(pedigree.parent2Name)) &&
        (this.parent2Type == null ? pedigree.parent2Type == null : this.parent2Type.equals(pedigree.parent2Type)) &&
        (this.pedigree == null ? pedigree.pedigree == null : this.pedigree.equals(pedigree.pedigree)) &&
        (this.siblings == null ? pedigree.siblings == null : this.siblings.equals(pedigree.siblings));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.crossingPlan == null ? 0: this.crossingPlan.hashCode());
    result = 31 * result + (this.crossingYear == null ? 0: this.crossingYear.hashCode());
    result = 31 * result + (this.defaultDisplayName == null ? 0: this.defaultDisplayName.hashCode());
    result = 31 * result + (this.familyCode == null ? 0: this.familyCode.hashCode());
    result = 31 * result + (this.germplasmDbId == null ? 0: this.germplasmDbId.hashCode());
    result = 31 * result + (this.parent1DbId == null ? 0: this.parent1DbId.hashCode());
    result = 31 * result + (this.parent1Id == null ? 0: this.parent1Id.hashCode());
    result = 31 * result + (this.parent1Name == null ? 0: this.parent1Name.hashCode());
    result = 31 * result + (this.parent1Type == null ? 0: this.parent1Type.hashCode());
    result = 31 * result + (this.parent2DbId == null ? 0: this.parent2DbId.hashCode());
    result = 31 * result + (this.parent2Id == null ? 0: this.parent2Id.hashCode());
    result = 31 * result + (this.parent2Name == null ? 0: this.parent2Name.hashCode());
    result = 31 * result + (this.parent2Type == null ? 0: this.parent2Type.hashCode());
    result = 31 * result + (this.pedigree == null ? 0: this.pedigree.hashCode());
    result = 31 * result + (this.siblings == null ? 0: this.siblings.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pedigree {\n");
    
    sb.append("  crossingPlan: ").append(crossingPlan).append("\n");
    sb.append("  crossingYear: ").append(crossingYear).append("\n");
    sb.append("  defaultDisplayName: ").append(defaultDisplayName).append("\n");
    sb.append("  familyCode: ").append(familyCode).append("\n");
    sb.append("  germplasmDbId: ").append(germplasmDbId).append("\n");
    sb.append("  parent1DbId: ").append(parent1DbId).append("\n");
    sb.append("  parent1Id: ").append(parent1Id).append("\n");
    sb.append("  parent1Name: ").append(parent1Name).append("\n");
    sb.append("  parent1Type: ").append(parent1Type).append("\n");
    sb.append("  parent2DbId: ").append(parent2DbId).append("\n");
    sb.append("  parent2Id: ").append(parent2Id).append("\n");
    sb.append("  parent2Name: ").append(parent2Name).append("\n");
    sb.append("  parent2Type: ").append(parent2Type).append("\n");
    sb.append("  pedigree: ").append(pedigree).append("\n");
    sb.append("  siblings: ").append(siblings).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
