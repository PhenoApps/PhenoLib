/**
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;
import java.io.Serializable;

@ApiModel(description = "")
public class LinkageGroup implements Serializable {
  
  @SerializedName("linkageGroupName")
  private String linkageGroupName = null;
  @SerializedName("markerCount")
  private Integer markerCount = null;
  @SerializedName("maxPosition")
  private Integer maxPosition = null;

  /**
   * The Uniquely Identifiable name of this linkage group
   **/
  @ApiModelProperty(value = "The Uniquely Identifiable name of this linkage group")
  public String getLinkageGroupName() {
    return linkageGroupName;
  }
  public void setLinkageGroupName(String linkageGroupName) {
    this.linkageGroupName = linkageGroupName;
  }

  /**
   * The number of markers associated with this linkage group
   **/
  @ApiModelProperty(value = "The number of markers associated with this linkage group")
  public Integer getMarkerCount() {
    return markerCount;
  }
  public void setMarkerCount(Integer markerCount) {
    this.markerCount = markerCount;
  }

  /**
   * The maximum position of a marker within this linkage group
   **/
  @ApiModelProperty(value = "The maximum position of a marker within this linkage group")
  public Integer getMaxPosition() {
    return maxPosition;
  }
  public void setMaxPosition(Integer maxPosition) {
    this.maxPosition = maxPosition;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkageGroup linkageGroup = (LinkageGroup) o;
    return (this.linkageGroupName == null ? linkageGroup.linkageGroupName == null : this.linkageGroupName.equals(linkageGroup.linkageGroupName)) &&
        (this.markerCount == null ? linkageGroup.markerCount == null : this.markerCount.equals(linkageGroup.markerCount)) &&
        (this.maxPosition == null ? linkageGroup.maxPosition == null : this.maxPosition.equals(linkageGroup.maxPosition));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.linkageGroupName == null ? 0: this.linkageGroupName.hashCode());
    result = 31 * result + (this.markerCount == null ? 0: this.markerCount.hashCode());
    result = 31 * result + (this.maxPosition == null ? 0: this.maxPosition.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkageGroup {\n");
    
    sb.append("  linkageGroupName: ").append(linkageGroupName).append("\n");
    sb.append("  markerCount: ").append(markerCount).append("\n");
    sb.append("  maxPosition: ").append(maxPosition).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
