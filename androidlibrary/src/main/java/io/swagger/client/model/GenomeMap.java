/**
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;
import java.io.Serializable;

@ApiModel(description = "")
public class GenomeMap implements Serializable {
  
  @SerializedName("comments")
  private String comments = null;
  @SerializedName("linkageGroupCount")
  private Integer linkageGroupCount = null;
  @SerializedName("mapDbId")
  private String mapDbId = null;
  @SerializedName("markerCount")
  private Integer markerCount = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("publishedDate")
  private Date publishedDate = null;
  @SerializedName("species")
  private String species = null;
  @SerializedName("type")
  private String type = null;
  @SerializedName("unit")
  private String unit = null;

  /**
   * Additional comments
   **/
  @ApiModelProperty(value = "Additional comments")
  public String getComments() {
    return comments;
  }
  public void setComments(String comments) {
    this.comments = comments;
  }

  /**
   * The number of linkage groups present in this genome map
   **/
  @ApiModelProperty(value = "The number of linkage groups present in this genome map")
  public Integer getLinkageGroupCount() {
    return linkageGroupCount;
  }
  public void setLinkageGroupCount(Integer linkageGroupCount) {
    this.linkageGroupCount = linkageGroupCount;
  }

  /**
   * The ID which uniquely identifies this genome map
   **/
  @ApiModelProperty(value = "The ID which uniquely identifies this genome map")
  public String getMapDbId() {
    return mapDbId;
  }
  public void setMapDbId(String mapDbId) {
    this.mapDbId = mapDbId;
  }

  /**
   * The number of markers present in this genome map
   **/
  @ApiModelProperty(value = "The number of markers present in this genome map")
  public Integer getMarkerCount() {
    return markerCount;
  }
  public void setMarkerCount(Integer markerCount) {
    this.markerCount = markerCount;
  }

  /**
   * A human readable name for this genome map
   **/
  @ApiModelProperty(value = "A human readable name for this genome map")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * The date this genome was published
   **/
  @ApiModelProperty(value = "The date this genome was published")
  public Date getPublishedDate() {
    return publishedDate;
  }
  public void setPublishedDate(Date publishedDate) {
    this.publishedDate = publishedDate;
  }

  /**
   * The name of the species 
   **/
  @ApiModelProperty(value = "The name of the species ")
  public String getSpecies() {
    return species;
  }
  public void setSpecies(String species) {
    this.species = species;
  }

  /**
   * The type of map this represents, ussually \"Genetic\"
   **/
  @ApiModelProperty(value = "The type of map this represents, ussually \"Genetic\"")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }

  /**
   * The units used to describe the data in this map
   **/
  @ApiModelProperty(value = "The units used to describe the data in this map")
  public String getUnit() {
    return unit;
  }
  public void setUnit(String unit) {
    this.unit = unit;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenomeMap genomeMap = (GenomeMap) o;
    return (this.comments == null ? genomeMap.comments == null : this.comments.equals(genomeMap.comments)) &&
        (this.linkageGroupCount == null ? genomeMap.linkageGroupCount == null : this.linkageGroupCount.equals(genomeMap.linkageGroupCount)) &&
        (this.mapDbId == null ? genomeMap.mapDbId == null : this.mapDbId.equals(genomeMap.mapDbId)) &&
        (this.markerCount == null ? genomeMap.markerCount == null : this.markerCount.equals(genomeMap.markerCount)) &&
        (this.name == null ? genomeMap.name == null : this.name.equals(genomeMap.name)) &&
        (this.publishedDate == null ? genomeMap.publishedDate == null : this.publishedDate.equals(genomeMap.publishedDate)) &&
        (this.species == null ? genomeMap.species == null : this.species.equals(genomeMap.species)) &&
        (this.type == null ? genomeMap.type == null : this.type.equals(genomeMap.type)) &&
        (this.unit == null ? genomeMap.unit == null : this.unit.equals(genomeMap.unit));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.comments == null ? 0: this.comments.hashCode());
    result = 31 * result + (this.linkageGroupCount == null ? 0: this.linkageGroupCount.hashCode());
    result = 31 * result + (this.mapDbId == null ? 0: this.mapDbId.hashCode());
    result = 31 * result + (this.markerCount == null ? 0: this.markerCount.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.publishedDate == null ? 0: this.publishedDate.hashCode());
    result = 31 * result + (this.species == null ? 0: this.species.hashCode());
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    result = 31 * result + (this.unit == null ? 0: this.unit.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenomeMap {\n");
    
    sb.append("  comments: ").append(comments).append("\n");
    sb.append("  linkageGroupCount: ").append(linkageGroupCount).append("\n");
    sb.append("  mapDbId: ").append(mapDbId).append("\n");
    sb.append("  markerCount: ").append(markerCount).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  publishedDate: ").append(publishedDate).append("\n");
    sb.append("  species: ").append(species).append("\n");
    sb.append("  type: ").append(type).append("\n");
    sb.append("  unit: ").append(unit).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
