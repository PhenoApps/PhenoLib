/**
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;
import java.io.Serializable;

@ApiModel(description = "")
public class Trait implements Serializable {
  
  @SerializedName("alternativeAbbreviations")
  private List<String> alternativeAbbreviations = null;
  @SerializedName("attribute")
  private String attribute = null;
  @SerializedName("class")
  private String _class = null;
  @SerializedName("description")
  private String description = null;
  @SerializedName("entity")
  private String entity = null;
  @SerializedName("mainAbbreviation")
  private String mainAbbreviation = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("status")
  private String status = null;
  @SerializedName("synonyms")
  private List<String> synonyms = null;
  @SerializedName("traitDbId")
  private String traitDbId = null;
  @SerializedName("xref")
  private String xref = null;

  /**
   * Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention
   **/
  @ApiModelProperty(value = "Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention")
  public List<String> getAlternativeAbbreviations() {
    return alternativeAbbreviations;
  }
  public void setAlternativeAbbreviations(List<String> alternativeAbbreviations) {
    this.alternativeAbbreviations = alternativeAbbreviations;
  }

  /**
   * A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"
   **/
  @ApiModelProperty(value = "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"")
  public String getAttribute() {
    return attribute;
  }
  public void setAttribute(String attribute) {
    this.attribute = attribute;
  }

  /**
   * Trait class. (examples: \"morphological trait\", \"phenological trait\", \"agronomical trait\", \"physiological trait\", \"abiotic stress trait\", \"biotic stress trait\", \"biochemical trait\", \"quality traits trait\", \"fertility trait\", etc.)
   **/
  @ApiModelProperty(value = "Trait class. (examples: \"morphological trait\", \"phenological trait\", \"agronomical trait\", \"physiological trait\", \"abiotic stress trait\", \"biotic stress trait\", \"biochemical trait\", \"quality traits trait\", \"fertility trait\", etc.)")
  public String getClass() {
    return _class;
  }
  public void setClass(String _class) {
    this._class = _class;
  }

  /**
   * The description of a trait
   **/
  @ApiModelProperty(value = "The description of a trait")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"
   **/
  @ApiModelProperty(value = "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"")
  public String getEntity() {
    return entity;
  }
  public void setEntity(String entity) {
    this.entity = entity;
  }

  /**
   * Main abbreviation for trait name. (examples: \"Carotenoid content\" => \"CC\")
   **/
  @ApiModelProperty(value = "Main abbreviation for trait name. (examples: \"Carotenoid content\" => \"CC\")")
  public String getMainAbbreviation() {
    return mainAbbreviation;
  }
  public void setMainAbbreviation(String mainAbbreviation) {
    this.mainAbbreviation = mainAbbreviation;
  }

  /**
   * The human readable name of a trait
   **/
  @ApiModelProperty(value = "The human readable name of a trait")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)
   **/
  @ApiModelProperty(value = "Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)")
  public String getStatus() {
    return status;
  }
  public void setStatus(String status) {
    this.status = status;
  }

  /**
   * Other trait names
   **/
  @ApiModelProperty(value = "Other trait names")
  public List<String> getSynonyms() {
    return synonyms;
  }
  public void setSynonyms(List<String> synonyms) {
    this.synonyms = synonyms;
  }

  /**
   * The ID which uniquely identifies a trait
   **/
  @ApiModelProperty(value = "The ID which uniquely identifies a trait")
  public String getTraitDbId() {
    return traitDbId;
  }
  public void setTraitDbId(String traitDbId) {
    this.traitDbId = traitDbId;
  }

  /**
   * Cross reference of the trait to an external ontology or database term e.g., Xref to a trait ontology (TO) term
   **/
  @ApiModelProperty(value = "Cross reference of the trait to an external ontology or database term e.g., Xref to a trait ontology (TO) term")
  public String getXref() {
    return xref;
  }
  public void setXref(String xref) {
    this.xref = xref;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Trait trait = (Trait) o;
    return (this.alternativeAbbreviations == null ? trait.alternativeAbbreviations == null : this.alternativeAbbreviations.equals(trait.alternativeAbbreviations)) &&
        (this.attribute == null ? trait.attribute == null : this.attribute.equals(trait.attribute)) &&
        (this._class == null ? trait._class == null : this._class.equals(trait._class)) &&
        (this.description == null ? trait.description == null : this.description.equals(trait.description)) &&
        (this.entity == null ? trait.entity == null : this.entity.equals(trait.entity)) &&
        (this.mainAbbreviation == null ? trait.mainAbbreviation == null : this.mainAbbreviation.equals(trait.mainAbbreviation)) &&
        (this.name == null ? trait.name == null : this.name.equals(trait.name)) &&
        (this.status == null ? trait.status == null : this.status.equals(trait.status)) &&
        (this.synonyms == null ? trait.synonyms == null : this.synonyms.equals(trait.synonyms)) &&
        (this.traitDbId == null ? trait.traitDbId == null : this.traitDbId.equals(trait.traitDbId)) &&
        (this.xref == null ? trait.xref == null : this.xref.equals(trait.xref));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.alternativeAbbreviations == null ? 0: this.alternativeAbbreviations.hashCode());
    result = 31 * result + (this.attribute == null ? 0: this.attribute.hashCode());
    result = 31 * result + (this._class == null ? 0: this._class.hashCode());
    result = 31 * result + (this.description == null ? 0: this.description.hashCode());
    result = 31 * result + (this.entity == null ? 0: this.entity.hashCode());
    result = 31 * result + (this.mainAbbreviation == null ? 0: this.mainAbbreviation.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.status == null ? 0: this.status.hashCode());
    result = 31 * result + (this.synonyms == null ? 0: this.synonyms.hashCode());
    result = 31 * result + (this.traitDbId == null ? 0: this.traitDbId.hashCode());
    result = 31 * result + (this.xref == null ? 0: this.xref.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Trait {\n");
    
    sb.append("  alternativeAbbreviations: ").append(alternativeAbbreviations).append("\n");
    sb.append("  attribute: ").append(attribute).append("\n");
    sb.append("  _class: ").append(_class).append("\n");
    sb.append("  description: ").append(description).append("\n");
    sb.append("  entity: ").append(entity).append("\n");
    sb.append("  mainAbbreviation: ").append(mainAbbreviation).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  status: ").append(status).append("\n");
    sb.append("  synonyms: ").append(synonyms).append("\n");
    sb.append("  traitDbId: ").append(traitDbId).append("\n");
    sb.append("  xref: ").append(xref).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
