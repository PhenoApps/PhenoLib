/**
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.client.model.VendorSpecificationStandardRequirementBlankWellPosition;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;
import java.io.Serializable;

@ApiModel(description = "")
public class VendorSpecificationStandardRequirement implements Serializable {
  
  @SerializedName("blankWellPosition")
  private VendorSpecificationStandardRequirementBlankWellPosition blankWellPosition = null;
  @SerializedName("inputFormatDetails")
  private String inputFormatDetails = null;
  @SerializedName("inputFormats")
  private List<String> inputFormats = null;
  @SerializedName("maxConcentration")
  private String maxConcentration = null;
  @SerializedName("maxVolume")
  private String maxVolume = null;
  @SerializedName("minConcentration")
  private String minConcentration = null;
  @SerializedName("minSampleNumber")
  private String minSampleNumber = null;
  @SerializedName("minVolume")
  private String minVolume = null;
  @SerializedName("plateOrientation")
  private String plateOrientation = null;
  @SerializedName("sampleTypeDetails")
  private String sampleTypeDetails = null;
  @SerializedName("sampleTypes")
  private List<String> sampleTypes = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public VendorSpecificationStandardRequirementBlankWellPosition getBlankWellPosition() {
    return blankWellPosition;
  }
  public void setBlankWellPosition(VendorSpecificationStandardRequirementBlankWellPosition blankWellPosition) {
    this.blankWellPosition = blankWellPosition;
  }

  /**
   * Human readable details about the accepted input formats
   **/
  @ApiModelProperty(value = "Human readable details about the accepted input formats")
  public String getInputFormatDetails() {
    return inputFormatDetails;
  }
  public void setInputFormatDetails(String inputFormatDetails) {
    this.inputFormatDetails = inputFormatDetails;
  }

  /**
   * List of accepted data formats
   **/
  @ApiModelProperty(value = "List of accepted data formats")
  public List<String> getInputFormats() {
    return inputFormats;
  }
  public void setInputFormats(List<String> inputFormats) {
    this.inputFormats = inputFormats;
  }

  /**
   * The maximum allowed concentration
   **/
  @ApiModelProperty(value = "The maximum allowed concentration")
  public String getMaxConcentration() {
    return maxConcentration;
  }
  public void setMaxConcentration(String maxConcentration) {
    this.maxConcentration = maxConcentration;
  }

  /**
   * The minimum allowed volume of a sample
   **/
  @ApiModelProperty(value = "The minimum allowed volume of a sample")
  public String getMaxVolume() {
    return maxVolume;
  }
  public void setMaxVolume(String maxVolume) {
    this.maxVolume = maxVolume;
  }

  /**
   * the minimum allowed concentration of a sample
   **/
  @ApiModelProperty(value = "the minimum allowed concentration of a sample")
  public String getMinConcentration() {
    return minConcentration;
  }
  public void setMinConcentration(String minConcentration) {
    this.minConcentration = minConcentration;
  }

  /**
   * The first sample number 
   **/
  @ApiModelProperty(value = "The first sample number ")
  public String getMinSampleNumber() {
    return minSampleNumber;
  }
  public void setMinSampleNumber(String minSampleNumber) {
    this.minSampleNumber = minSampleNumber;
  }

  /**
   * The minimum allowed volume of a sample
   **/
  @ApiModelProperty(value = "The minimum allowed volume of a sample")
  public String getMinVolume() {
    return minVolume;
  }
  public void setMinVolume(String minVolume) {
    this.minVolume = minVolume;
  }

  /**
   * The orientation of a plate
   **/
  @ApiModelProperty(value = "The orientation of a plate")
  public String getPlateOrientation() {
    return plateOrientation;
  }
  public void setPlateOrientation(String plateOrientation) {
    this.plateOrientation = plateOrientation;
  }

  /**
   * Human readable details about the allowed sample types
   **/
  @ApiModelProperty(value = "Human readable details about the allowed sample types")
  public String getSampleTypeDetails() {
    return sampleTypeDetails;
  }
  public void setSampleTypeDetails(String sampleTypeDetails) {
    this.sampleTypeDetails = sampleTypeDetails;
  }

  /**
   * List of allowed sample types
   **/
  @ApiModelProperty(value = "List of allowed sample types")
  public List<String> getSampleTypes() {
    return sampleTypes;
  }
  public void setSampleTypes(List<String> sampleTypes) {
    this.sampleTypes = sampleTypes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VendorSpecificationStandardRequirement vendorSpecificationStandardRequirement = (VendorSpecificationStandardRequirement) o;
    return (this.blankWellPosition == null ? vendorSpecificationStandardRequirement.blankWellPosition == null : this.blankWellPosition.equals(vendorSpecificationStandardRequirement.blankWellPosition)) &&
        (this.inputFormatDetails == null ? vendorSpecificationStandardRequirement.inputFormatDetails == null : this.inputFormatDetails.equals(vendorSpecificationStandardRequirement.inputFormatDetails)) &&
        (this.inputFormats == null ? vendorSpecificationStandardRequirement.inputFormats == null : this.inputFormats.equals(vendorSpecificationStandardRequirement.inputFormats)) &&
        (this.maxConcentration == null ? vendorSpecificationStandardRequirement.maxConcentration == null : this.maxConcentration.equals(vendorSpecificationStandardRequirement.maxConcentration)) &&
        (this.maxVolume == null ? vendorSpecificationStandardRequirement.maxVolume == null : this.maxVolume.equals(vendorSpecificationStandardRequirement.maxVolume)) &&
        (this.minConcentration == null ? vendorSpecificationStandardRequirement.minConcentration == null : this.minConcentration.equals(vendorSpecificationStandardRequirement.minConcentration)) &&
        (this.minSampleNumber == null ? vendorSpecificationStandardRequirement.minSampleNumber == null : this.minSampleNumber.equals(vendorSpecificationStandardRequirement.minSampleNumber)) &&
        (this.minVolume == null ? vendorSpecificationStandardRequirement.minVolume == null : this.minVolume.equals(vendorSpecificationStandardRequirement.minVolume)) &&
        (this.plateOrientation == null ? vendorSpecificationStandardRequirement.plateOrientation == null : this.plateOrientation.equals(vendorSpecificationStandardRequirement.plateOrientation)) &&
        (this.sampleTypeDetails == null ? vendorSpecificationStandardRequirement.sampleTypeDetails == null : this.sampleTypeDetails.equals(vendorSpecificationStandardRequirement.sampleTypeDetails)) &&
        (this.sampleTypes == null ? vendorSpecificationStandardRequirement.sampleTypes == null : this.sampleTypes.equals(vendorSpecificationStandardRequirement.sampleTypes));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.blankWellPosition == null ? 0: this.blankWellPosition.hashCode());
    result = 31 * result + (this.inputFormatDetails == null ? 0: this.inputFormatDetails.hashCode());
    result = 31 * result + (this.inputFormats == null ? 0: this.inputFormats.hashCode());
    result = 31 * result + (this.maxConcentration == null ? 0: this.maxConcentration.hashCode());
    result = 31 * result + (this.maxVolume == null ? 0: this.maxVolume.hashCode());
    result = 31 * result + (this.minConcentration == null ? 0: this.minConcentration.hashCode());
    result = 31 * result + (this.minSampleNumber == null ? 0: this.minSampleNumber.hashCode());
    result = 31 * result + (this.minVolume == null ? 0: this.minVolume.hashCode());
    result = 31 * result + (this.plateOrientation == null ? 0: this.plateOrientation.hashCode());
    result = 31 * result + (this.sampleTypeDetails == null ? 0: this.sampleTypeDetails.hashCode());
    result = 31 * result + (this.sampleTypes == null ? 0: this.sampleTypes.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class VendorSpecificationStandardRequirement {\n");
    
    sb.append("  blankWellPosition: ").append(blankWellPosition).append("\n");
    sb.append("  inputFormatDetails: ").append(inputFormatDetails).append("\n");
    sb.append("  inputFormats: ").append(inputFormats).append("\n");
    sb.append("  maxConcentration: ").append(maxConcentration).append("\n");
    sb.append("  maxVolume: ").append(maxVolume).append("\n");
    sb.append("  minConcentration: ").append(minConcentration).append("\n");
    sb.append("  minSampleNumber: ").append(minSampleNumber).append("\n");
    sb.append("  minVolume: ").append(minVolume).append("\n");
    sb.append("  plateOrientation: ").append(plateOrientation).append("\n");
    sb.append("  sampleTypeDetails: ").append(sampleTypeDetails).append("\n");
    sb.append("  sampleTypes: ").append(sampleTypes).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
