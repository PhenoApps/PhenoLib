/**
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;
import java.io.Serializable;

@ApiModel(description = "")
public class MarkerProfileDescription implements Serializable {
  
  @SerializedName("analysisMethod")
  private String analysisMethod = null;
  @SerializedName("extractDbId")
  private String extractDbId = null;
  @SerializedName("germplasmDbId")
  private String germplasmDbId = null;
  @SerializedName("markerprofileDbId")
  private String markerprofileDbId = null;
  @SerializedName("resultCount")
  private Integer resultCount = null;
  @SerializedName("sampleDbId")
  private String sampleDbId = null;
  @SerializedName("uniqueDisplayName")
  private String uniqueDisplayName = null;

  /**
   * The type of analysis performed to determine a set of marker data
   **/
  @ApiModelProperty(value = "The type of analysis performed to determine a set of marker data")
  public String getAnalysisMethod() {
    return analysisMethod;
  }
  public void setAnalysisMethod(String analysisMethod) {
    this.analysisMethod = analysisMethod;
  }

  /**
   *  The ID which uniquely identifies this data extract
   **/
  @ApiModelProperty(value = " The ID which uniquely identifies this data extract")
  public String getExtractDbId() {
    return extractDbId;
  }
  public void setExtractDbId(String extractDbId) {
    this.extractDbId = extractDbId;
  }

  /**
   *  The ID which uniquely identifies a germplasm
   **/
  @ApiModelProperty(value = " The ID which uniquely identifies a germplasm")
  public String getGermplasmDbId() {
    return germplasmDbId;
  }
  public void setGermplasmDbId(String germplasmDbId) {
    this.germplasmDbId = germplasmDbId;
  }

  /**
   * Unique in the database. Can be a catenation of unique IDs for germplasm and extract. <strong>Required</strong>
   **/
  @ApiModelProperty(value = "Unique in the database. Can be a catenation of unique IDs for germplasm and extract. <strong>Required</strong>")
  public String getMarkerprofileDbId() {
    return markerprofileDbId;
  }
  public void setMarkerprofileDbId(String markerprofileDbId) {
    this.markerprofileDbId = markerprofileDbId;
  }

  /**
   * Number of markers present in the marker profile
   **/
  @ApiModelProperty(value = "Number of markers present in the marker profile")
  public Integer getResultCount() {
    return resultCount;
  }
  public void setResultCount(Integer resultCount) {
    this.resultCount = resultCount;
  }

  /**
   * The ID which uniquely identifies a sample
   **/
  @ApiModelProperty(value = "The ID which uniquely identifies a sample")
  public String getSampleDbId() {
    return sampleDbId;
  }
  public void setSampleDbId(String sampleDbId) {
    this.sampleDbId = sampleDbId;
  }

  /**
   * Human readable display name for this marker profile
   **/
  @ApiModelProperty(value = "Human readable display name for this marker profile")
  public String getUniqueDisplayName() {
    return uniqueDisplayName;
  }
  public void setUniqueDisplayName(String uniqueDisplayName) {
    this.uniqueDisplayName = uniqueDisplayName;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarkerProfileDescription markerProfileDescription = (MarkerProfileDescription) o;
    return (this.analysisMethod == null ? markerProfileDescription.analysisMethod == null : this.analysisMethod.equals(markerProfileDescription.analysisMethod)) &&
        (this.extractDbId == null ? markerProfileDescription.extractDbId == null : this.extractDbId.equals(markerProfileDescription.extractDbId)) &&
        (this.germplasmDbId == null ? markerProfileDescription.germplasmDbId == null : this.germplasmDbId.equals(markerProfileDescription.germplasmDbId)) &&
        (this.markerprofileDbId == null ? markerProfileDescription.markerprofileDbId == null : this.markerprofileDbId.equals(markerProfileDescription.markerprofileDbId)) &&
        (this.resultCount == null ? markerProfileDescription.resultCount == null : this.resultCount.equals(markerProfileDescription.resultCount)) &&
        (this.sampleDbId == null ? markerProfileDescription.sampleDbId == null : this.sampleDbId.equals(markerProfileDescription.sampleDbId)) &&
        (this.uniqueDisplayName == null ? markerProfileDescription.uniqueDisplayName == null : this.uniqueDisplayName.equals(markerProfileDescription.uniqueDisplayName));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.analysisMethod == null ? 0: this.analysisMethod.hashCode());
    result = 31 * result + (this.extractDbId == null ? 0: this.extractDbId.hashCode());
    result = 31 * result + (this.germplasmDbId == null ? 0: this.germplasmDbId.hashCode());
    result = 31 * result + (this.markerprofileDbId == null ? 0: this.markerprofileDbId.hashCode());
    result = 31 * result + (this.resultCount == null ? 0: this.resultCount.hashCode());
    result = 31 * result + (this.sampleDbId == null ? 0: this.sampleDbId.hashCode());
    result = 31 * result + (this.uniqueDisplayName == null ? 0: this.uniqueDisplayName.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarkerProfileDescription {\n");
    
    sb.append("  analysisMethod: ").append(analysisMethod).append("\n");
    sb.append("  extractDbId: ").append(extractDbId).append("\n");
    sb.append("  germplasmDbId: ").append(germplasmDbId).append("\n");
    sb.append("  markerprofileDbId: ").append(markerprofileDbId).append("\n");
    sb.append("  resultCount: ").append(resultCount).append("\n");
    sb.append("  sampleDbId: ").append(sampleDbId).append("\n");
    sb.append("  uniqueDisplayName: ").append(uniqueDisplayName).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
