/**
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;
import java.io.Serializable;

@ApiModel(description = "")
public class MarkersSearchRequest implements Serializable {
  
  @SerializedName("includeSynonyms")
  private Boolean includeSynonyms = null;
  @SerializedName("markerDbIds")
  private List<String> markerDbIds = null;
  public enum MatchMethodEnum {
     exact,  case_insensitive,  wildcard, 
  };
  @SerializedName("matchMethod")
  private MatchMethodEnum matchMethod = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("page")
  private Integer page = null;
  @SerializedName("pageSize")
  private Integer pageSize = null;
  @SerializedName("type")
  private String type = null;

  /**
   * Should an array of synonyms be included in the response
   **/
  @ApiModelProperty(value = "Should an array of synonyms be included in the response")
  public Boolean getIncludeSynonyms() {
    return includeSynonyms;
  }
  public void setIncludeSynonyms(Boolean includeSynonyms) {
    this.includeSynonyms = includeSynonyms;
  }

  /**
   * List of IDs which uniquely identify markers 
   **/
  @ApiModelProperty(value = "List of IDs which uniquely identify markers ")
  public List<String> getMarkerDbIds() {
    return markerDbIds;
  }
  public void setMarkerDbIds(List<String> markerDbIds) {
    this.markerDbIds = markerDbIds;
  }

  /**
   * How to perform string matching during search. 'exact' will search for exact, case sensitive matches only. 'case_insensitive' will search for exact matches, but case insensitive. 'wildcard' will allow the special characters '*' (star) and '%' (percent) to represent variable length arbitrary strings, and the special character '?' (question) to represent one arbitrary character.
   **/
  @ApiModelProperty(value = "How to perform string matching during search. 'exact' will search for exact, case sensitive matches only. 'case_insensitive' will search for exact matches, but case insensitive. 'wildcard' will allow the special characters '*' (star) and '%' (percent) to represent variable length arbitrary strings, and the special character '?' (question) to represent one arbitrary character.")
  public MatchMethodEnum getMatchMethod() {
    return matchMethod;
  }
  public void setMatchMethod(MatchMethodEnum matchMethod) {
    this.matchMethod = matchMethod;
  }

  /**
   * The search pattern for the marker name or synonym.
   **/
  @ApiModelProperty(value = "The search pattern for the marker name or synonym.")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * Which page of the \"data\" array to return. The page indexing starts at 0 (page=0 will return the first page). Default is 0.
   **/
  @ApiModelProperty(value = "Which page of the \"data\" array to return. The page indexing starts at 0 (page=0 will return the first page). Default is 0.")
  public Integer getPage() {
    return page;
  }
  public void setPage(Integer page) {
    this.page = page;
  }

  /**
   * The maximum number of items to return per page of the \"data\" array. Default is 1000.
   **/
  @ApiModelProperty(value = "The maximum number of items to return per page of the \"data\" array. Default is 1000.")
  public Integer getPageSize() {
    return pageSize;
  }
  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  /**
   * The type of marker, e.g. SNP
   **/
  @ApiModelProperty(value = "The type of marker, e.g. SNP")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarkersSearchRequest markersSearchRequest = (MarkersSearchRequest) o;
    return (this.includeSynonyms == null ? markersSearchRequest.includeSynonyms == null : this.includeSynonyms.equals(markersSearchRequest.includeSynonyms)) &&
        (this.markerDbIds == null ? markersSearchRequest.markerDbIds == null : this.markerDbIds.equals(markersSearchRequest.markerDbIds)) &&
        (this.matchMethod == null ? markersSearchRequest.matchMethod == null : this.matchMethod.equals(markersSearchRequest.matchMethod)) &&
        (this.name == null ? markersSearchRequest.name == null : this.name.equals(markersSearchRequest.name)) &&
        (this.page == null ? markersSearchRequest.page == null : this.page.equals(markersSearchRequest.page)) &&
        (this.pageSize == null ? markersSearchRequest.pageSize == null : this.pageSize.equals(markersSearchRequest.pageSize)) &&
        (this.type == null ? markersSearchRequest.type == null : this.type.equals(markersSearchRequest.type));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.includeSynonyms == null ? 0: this.includeSynonyms.hashCode());
    result = 31 * result + (this.markerDbIds == null ? 0: this.markerDbIds.hashCode());
    result = 31 * result + (this.matchMethod == null ? 0: this.matchMethod.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.page == null ? 0: this.page.hashCode());
    result = 31 * result + (this.pageSize == null ? 0: this.pageSize.hashCode());
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarkersSearchRequest {\n");
    
    sb.append("  includeSynonyms: ").append(includeSynonyms).append("\n");
    sb.append("  markerDbIds: ").append(markerDbIds).append("\n");
    sb.append("  matchMethod: ").append(matchMethod).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  page: ").append(page).append("\n");
    sb.append("  pageSize: ").append(pageSize).append("\n");
    sb.append("  type: ").append(type).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
