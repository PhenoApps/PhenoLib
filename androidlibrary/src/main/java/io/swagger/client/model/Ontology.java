/**
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;
import java.io.Serializable;

@ApiModel(description = "")
public class Ontology implements Serializable {
  
  @SerializedName("authors")
  private String authors = null;
  @SerializedName("copyright")
  private String copyright = null;
  @SerializedName("description")
  private String description = null;
  @SerializedName("licence")
  private String licence = null;
  @SerializedName("ontologyDbId")
  private String ontologyDbId = null;
  @SerializedName("ontologyName")
  private String ontologyName = null;
  @SerializedName("version")
  private String version = null;

  /**
   * Ontology's list of authors (no specific format)
   **/
  @ApiModelProperty(value = "Ontology's list of authors (no specific format)")
  public String getAuthors() {
    return authors;
  }
  public void setAuthors(String authors) {
    this.authors = authors;
  }

  /**
   * Ontology copyright
   **/
  @ApiModelProperty(value = "Ontology copyright")
  public String getCopyright() {
    return copyright;
  }
  public void setCopyright(String copyright) {
    this.copyright = copyright;
  }

  /**
   * Human readable description of Ontology
   **/
  @ApiModelProperty(value = "Human readable description of Ontology")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * Ontology licence
   **/
  @ApiModelProperty(value = "Ontology licence")
  public String getLicence() {
    return licence;
  }
  public void setLicence(String licence) {
    this.licence = licence;
  }

  /**
   * Ontology database unique identifier
   **/
  @ApiModelProperty(required = true, value = "Ontology database unique identifier")
  public String getOntologyDbId() {
    return ontologyDbId;
  }
  public void setOntologyDbId(String ontologyDbId) {
    this.ontologyDbId = ontologyDbId;
  }

  /**
   * Ontology name
   **/
  @ApiModelProperty(required = true, value = "Ontology name")
  public String getOntologyName() {
    return ontologyName;
  }
  public void setOntologyName(String ontologyName) {
    this.ontologyName = ontologyName;
  }

  /**
   * Ontology version (no specific format)
   **/
  @ApiModelProperty(value = "Ontology version (no specific format)")
  public String getVersion() {
    return version;
  }
  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ontology ontology = (Ontology) o;
    return (this.authors == null ? ontology.authors == null : this.authors.equals(ontology.authors)) &&
        (this.copyright == null ? ontology.copyright == null : this.copyright.equals(ontology.copyright)) &&
        (this.description == null ? ontology.description == null : this.description.equals(ontology.description)) &&
        (this.licence == null ? ontology.licence == null : this.licence.equals(ontology.licence)) &&
        (this.ontologyDbId == null ? ontology.ontologyDbId == null : this.ontologyDbId.equals(ontology.ontologyDbId)) &&
        (this.ontologyName == null ? ontology.ontologyName == null : this.ontologyName.equals(ontology.ontologyName)) &&
        (this.version == null ? ontology.version == null : this.version.equals(ontology.version));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.authors == null ? 0: this.authors.hashCode());
    result = 31 * result + (this.copyright == null ? 0: this.copyright.hashCode());
    result = 31 * result + (this.description == null ? 0: this.description.hashCode());
    result = 31 * result + (this.licence == null ? 0: this.licence.hashCode());
    result = 31 * result + (this.ontologyDbId == null ? 0: this.ontologyDbId.hashCode());
    result = 31 * result + (this.ontologyName == null ? 0: this.ontologyName.hashCode());
    result = 31 * result + (this.version == null ? 0: this.version.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ontology {\n");
    
    sb.append("  authors: ").append(authors).append("\n");
    sb.append("  copyright: ").append(copyright).append("\n");
    sb.append("  description: ").append(description).append("\n");
    sb.append("  licence: ").append(licence).append("\n");
    sb.append("  ontologyDbId: ").append(ontologyDbId).append("\n");
    sb.append("  ontologyName: ").append(ontologyName).append("\n");
    sb.append("  version: ").append(version).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
