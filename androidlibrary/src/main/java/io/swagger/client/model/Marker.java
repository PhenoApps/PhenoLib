/**
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;
import java.io.Serializable;

@ApiModel(description = "")
public class Marker implements Serializable {
  
  @SerializedName("analysisMethods")
  private List<String> analysisMethods = null;
  @SerializedName("defaultDisplayName")
  private String defaultDisplayName = null;
  @SerializedName("markerDbId")
  private String markerDbId = null;
  @SerializedName("refAlt")
  private List<String> refAlt = null;
  @SerializedName("synonyms")
  private List<String> synonyms = null;
  @SerializedName("type")
  private String type = null;

  /**
   * List of the genotyping platforms used to interrogate the marker
   **/
  @ApiModelProperty(value = "List of the genotyping platforms used to interrogate the marker")
  public List<String> getAnalysisMethods() {
    return analysisMethods;
  }
  public void setAnalysisMethods(List<String> analysisMethods) {
    this.analysisMethods = analysisMethods;
  }

  /**
   * A string representing the marker that will be meaningful to the user
   **/
  @ApiModelProperty(value = "A string representing the marker that will be meaningful to the user")
  public String getDefaultDisplayName() {
    return defaultDisplayName;
  }
  public void setDefaultDisplayName(String defaultDisplayName) {
    this.defaultDisplayName = defaultDisplayName;
  }

  /**
   * Internal db identifier
   **/
  @ApiModelProperty(value = "Internal db identifier")
  public String getMarkerDbId() {
    return markerDbId;
  }
  public void setMarkerDbId(String markerDbId) {
    this.markerDbId = markerDbId;
  }

  /**
   * List of the reference (as the first item) and alternatives (the remaining items)
   **/
  @ApiModelProperty(value = "List of the reference (as the first item) and alternatives (the remaining items)")
  public List<String> getRefAlt() {
    return refAlt;
  }
  public void setRefAlt(List<String> refAlt) {
    this.refAlt = refAlt;
  }

  /**
   * List of other names for this marker
   **/
  @ApiModelProperty(value = "List of other names for this marker")
  public List<String> getSynonyms() {
    return synonyms;
  }
  public void setSynonyms(List<String> synonyms) {
    this.synonyms = synonyms;
  }

  /**
   * The type of marker, e.g. SNP
   **/
  @ApiModelProperty(value = "The type of marker, e.g. SNP")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Marker marker = (Marker) o;
    return (this.analysisMethods == null ? marker.analysisMethods == null : this.analysisMethods.equals(marker.analysisMethods)) &&
        (this.defaultDisplayName == null ? marker.defaultDisplayName == null : this.defaultDisplayName.equals(marker.defaultDisplayName)) &&
        (this.markerDbId == null ? marker.markerDbId == null : this.markerDbId.equals(marker.markerDbId)) &&
        (this.refAlt == null ? marker.refAlt == null : this.refAlt.equals(marker.refAlt)) &&
        (this.synonyms == null ? marker.synonyms == null : this.synonyms.equals(marker.synonyms)) &&
        (this.type == null ? marker.type == null : this.type.equals(marker.type));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.analysisMethods == null ? 0: this.analysisMethods.hashCode());
    result = 31 * result + (this.defaultDisplayName == null ? 0: this.defaultDisplayName.hashCode());
    result = 31 * result + (this.markerDbId == null ? 0: this.markerDbId.hashCode());
    result = 31 * result + (this.refAlt == null ? 0: this.refAlt.hashCode());
    result = 31 * result + (this.synonyms == null ? 0: this.synonyms.hashCode());
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Marker {\n");
    
    sb.append("  analysisMethods: ").append(analysisMethods).append("\n");
    sb.append("  defaultDisplayName: ").append(defaultDisplayName).append("\n");
    sb.append("  markerDbId: ").append(markerDbId).append("\n");
    sb.append("  refAlt: ").append(refAlt).append("\n");
    sb.append("  synonyms: ").append(synonyms).append("\n");
    sb.append("  type: ").append(type).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
