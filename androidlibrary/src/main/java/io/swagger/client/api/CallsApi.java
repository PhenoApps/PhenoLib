/**
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.CallsResponse;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class CallsApi {
  String basePath = "https://test-server.brapi.org/brapi/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Call search
  * &lt;strong&gt;Implementation Notes&lt;/strong&gt; Having a consistent structure for the path string of each call is very important for teams to be able to connect and find errors. Read more on &lt;a href&#x3D;\&quot;https://github.com/plantbreeding/API/issues/144\&quot;&gt;Github&lt;/a&gt;. Here are the rules for the path of each call that should be returned &lt;ul&gt;          &lt;li&gt;Every word in the call path should match the documentation exactly, both in spelling and capitalization. Note that path strings are all lower case, but path parameters are camel case.&lt;/li&gt;           &lt;li&gt;Each path should start relative to &#39;/&#39; and therefore should not include &#39;/&#39;&lt;/li&gt;   &lt;li&gt;No leading or trailing slashes (&#39;/&#39;) &lt;/li&gt;   &lt;li&gt;Path parameters are wrapped in curly braces (&#39;{}&#39;). The name of the path parameter should be spelled exactly as it is specified in the documentation.&lt;/li&gt;         &lt;/ul&gt; &lt;table&gt;   &lt;tr&gt;     &lt;th&gt;Examples&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;&lt;strong&gt;GOOD&lt;/strong&gt;&lt;/td&gt;     &lt;td&gt;\&quot;call\&quot;: \&quot;germplasm/{germplasmDbId}/markerprofiles\&quot;&lt;/td&gt;   &lt;/tr&gt;    &lt;tr&gt;     &lt;td&gt;BAD&lt;/td&gt;     &lt;td&gt;\&quot;call\&quot;: \&quot;germplasm/{&lt;strong&gt;id&lt;/strong&gt;}/markerprofiles\&quot;&lt;/td&gt;   &lt;/tr&gt;    &lt;tr&gt;     &lt;td&gt;BAD&lt;/td&gt;     &lt;td&gt;\&quot;call\&quot;: \&quot;germplasm/{germplasmDbId}/marker&lt;strong&gt;P&lt;/strong&gt;rofiles\&quot;&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;BAD&lt;/td&gt;     &lt;td&gt;\&quot;call\&quot;: \&quot;germplasm/{germplasm&lt;strong&gt;dbid&lt;/strong&gt;}/markerprofiles\&quot;&lt;/td&gt;   &lt;/tr&gt;    &lt;tr&gt;     &lt;td&gt;BAD&lt;/td&gt;     &lt;td&gt;\&quot;call\&quot;: \&quot;&lt;strong&gt;brapi/v1&lt;/strong&gt;/germplasm/{germplasmDbId}/markerprofiles\&quot;&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;BAD&lt;/td&gt;     &lt;td&gt;\&quot;call\&quot;: \&quot;&lt;strong&gt;/g&lt;/strong&gt;ermplasm/{germplasmDbId}/markerprofile&lt;strong&gt;s/&lt;/strong&gt;\&quot;&lt;/td&gt;   &lt;/tr&gt;    &lt;tr&gt;     &lt;td&gt;BAD&lt;/td&gt;     &lt;td&gt;\&quot;call\&quot;: \&quot;germplasm/&lt;strong&gt;&amp;lt&lt;/strong&gt;germplasmDbId&lt;strong&gt;&amp;gt&lt;/strong&gt;/markerprofiles\&quot;&lt;/td&gt;   &lt;/tr&gt;  &lt;/table&gt;  &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/calls\&quot;&gt; test-server.brapi.org/brapi/v1/calls&lt;/a&gt;
   * @param datatype The data format supported by the call. Example: &#x60;json&#x60;
   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.
   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
   * @return CallsResponse
  */
  public CallsResponse callsGet (String datatype, Integer pageSize, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/calls";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "datatype", datatype));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CallsResponse) ApiInvoker.deserialize(localVarResponse, "", CallsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Call search
   * &lt;strong&gt;Implementation Notes&lt;/strong&gt; Having a consistent structure for the path string of each call is very important for teams to be able to connect and find errors. Read more on &lt;a href&#x3D;\&quot;https://github.com/plantbreeding/API/issues/144\&quot;&gt;Github&lt;/a&gt;. Here are the rules for the path of each call that should be returned &lt;ul&gt;          &lt;li&gt;Every word in the call path should match the documentation exactly, both in spelling and capitalization. Note that path strings are all lower case, but path parameters are camel case.&lt;/li&gt;           &lt;li&gt;Each path should start relative to &#39;/&#39; and therefore should not include &#39;/&#39;&lt;/li&gt;   &lt;li&gt;No leading or trailing slashes (&#39;/&#39;) &lt;/li&gt;   &lt;li&gt;Path parameters are wrapped in curly braces (&#39;{}&#39;). The name of the path parameter should be spelled exactly as it is specified in the documentation.&lt;/li&gt;         &lt;/ul&gt; &lt;table&gt;   &lt;tr&gt;     &lt;th&gt;Examples&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;&lt;strong&gt;GOOD&lt;/strong&gt;&lt;/td&gt;     &lt;td&gt;\&quot;call\&quot;: \&quot;germplasm/{germplasmDbId}/markerprofiles\&quot;&lt;/td&gt;   &lt;/tr&gt;    &lt;tr&gt;     &lt;td&gt;BAD&lt;/td&gt;     &lt;td&gt;\&quot;call\&quot;: \&quot;germplasm/{&lt;strong&gt;id&lt;/strong&gt;}/markerprofiles\&quot;&lt;/td&gt;   &lt;/tr&gt;    &lt;tr&gt;     &lt;td&gt;BAD&lt;/td&gt;     &lt;td&gt;\&quot;call\&quot;: \&quot;germplasm/{germplasmDbId}/marker&lt;strong&gt;P&lt;/strong&gt;rofiles\&quot;&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;BAD&lt;/td&gt;     &lt;td&gt;\&quot;call\&quot;: \&quot;germplasm/{germplasm&lt;strong&gt;dbid&lt;/strong&gt;}/markerprofiles\&quot;&lt;/td&gt;   &lt;/tr&gt;    &lt;tr&gt;     &lt;td&gt;BAD&lt;/td&gt;     &lt;td&gt;\&quot;call\&quot;: \&quot;&lt;strong&gt;brapi/v1&lt;/strong&gt;/germplasm/{germplasmDbId}/markerprofiles\&quot;&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;BAD&lt;/td&gt;     &lt;td&gt;\&quot;call\&quot;: \&quot;&lt;strong&gt;/g&lt;/strong&gt;ermplasm/{germplasmDbId}/markerprofile&lt;strong&gt;s/&lt;/strong&gt;\&quot;&lt;/td&gt;   &lt;/tr&gt;    &lt;tr&gt;     &lt;td&gt;BAD&lt;/td&gt;     &lt;td&gt;\&quot;call\&quot;: \&quot;germplasm/&lt;strong&gt;&amp;lt&lt;/strong&gt;germplasmDbId&lt;strong&gt;&amp;gt&lt;/strong&gt;/markerprofiles\&quot;&lt;/td&gt;   &lt;/tr&gt;  &lt;/table&gt;  &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/calls\&quot;&gt; test-server.brapi.org/brapi/v1/calls&lt;/a&gt;
   * @param datatype The data format supported by the call. Example: &#x60;json&#x60;   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
  */
  public void callsGet (String datatype, Integer pageSize, Integer page, final Response.Listener<CallsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/calls".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "datatype", datatype));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CallsResponse) ApiInvoker.deserialize(localVarResponse,  "", CallsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
