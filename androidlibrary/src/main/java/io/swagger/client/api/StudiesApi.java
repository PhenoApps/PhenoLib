/**
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.GermplasmSummaryListResponse;
import java.util.*;
import io.swagger.client.model.NewObservationDbIdsResponse;
import io.swagger.client.model.NewObservationUnitDbIdsResponse;
import io.swagger.client.model.NewObservationUnitRequest;
import io.swagger.client.model.NewObservationsRequest;
import io.swagger.client.model.NewObservationsRequestWrapperDeprecated;
import io.swagger.client.model.NewObservationsTableRequest;
import io.swagger.client.model.ObservationUnitPositionsResponse;
import io.swagger.client.model.ObservationUnitsResponse1;
import io.swagger.client.model.ObservationsResponse;
import io.swagger.client.model.SeasonsResponse;
import io.swagger.client.model.StudiesResponse;
import io.swagger.client.model.StudyLayoutRequest;
import io.swagger.client.model.StudyObservationVariablesResponse;
import io.swagger.client.model.StudyResponse;
import io.swagger.client.model.StudySearchRequest;
import io.swagger.client.model.StudyTypesResponse;
import io.swagger.client.model.StudyobservationsTableResponse;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class StudiesApi {
  String basePath = "https://test-server.brapi.org/brapi/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * List seasons or years
  *  Call to retrive all seasons (or years) in the database. (Added by Jan-Erik and Lukas 5/26/2016) Scope: PHENOTYPING. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/seasons\&quot;&gt; test-server.brapi.org/brapi/v1/seasons&lt;/a&gt;
   * @param year 
   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.
   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
   * @return SeasonsResponse
  */
  public SeasonsResponse seasonsGet (String year, Integer pageSize, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/seasons";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "year", year));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SeasonsResponse) ApiInvoker.deserialize(localVarResponse, "", SeasonsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List seasons or years
   *  Call to retrive all seasons (or years) in the database. (Added by Jan-Erik and Lukas 5/26/2016) Scope: PHENOTYPING. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/seasons\&quot;&gt; test-server.brapi.org/brapi/v1/seasons&lt;/a&gt;
   * @param year    * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
  */
  public void seasonsGet (String year, Integer pageSize, Integer page, final Response.Listener<SeasonsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/seasons".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "year", year));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SeasonsResponse) ApiInvoker.deserialize(localVarResponse,  "", SeasonsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Search Studies (GET)
  *  Scope: PHENOTYPING. Status: ACCEPTED. Implementation target date: PAG2016. Implemented by: Germinate Used by: Flapjack, Cassavabase See &lt;a href&#x3D;\&quot;#introduction/search-services\&quot;&gt;Search Services&lt;/a&gt; for additional implementation details. Get list of studies StartDate and endDate should be ISO8601 format for dates: YYYY-MM-DD &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies-search&lt;/a&gt;
   * @param studyType Filter based on study type e.g. Nursery, Trial or Genotype.
   * @param programDbId Program filter to only return studies associated with given program id.
   * @param locationDbId Filter by location
   * @param seasonDbId Filter by season or year
   * @param trialDbId Filter by trial
   * @param studyDbId Filter by study DbId
   * @param germplasmDbIds Filter studies where specified germplasm have been used/tested
   * @param observationVariableDbIds Filter studies where specified observation variables have been measured
   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.
   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
   * @param active Filter active status true/false.
   * @param sortBy Sort order. Name of the field to sort by.
   * @param sortOrder Sort order direction. Ascending/Descending.
   * @return StudiesResponse
  */
  public StudiesResponse studiesSearchGet (String studyType, String programDbId, String locationDbId, String seasonDbId, String trialDbId, String studyDbId, List<String> germplasmDbIds, List<String> observationVariableDbIds, Integer pageSize, Integer page, Boolean active, String sortBy, String sortOrder) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/studies-search";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "studyType", studyType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "programDbId", programDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "locationDbId", locationDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "seasonDbId", seasonDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "trialDbId", trialDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "studyDbId", studyDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "germplasmDbIds", germplasmDbIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "observationVariableDbIds", observationVariableDbIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "active", active));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sortBy", sortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sortOrder", sortOrder));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (StudiesResponse) ApiInvoker.deserialize(localVarResponse, "", StudiesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Search Studies (GET)
   *  Scope: PHENOTYPING. Status: ACCEPTED. Implementation target date: PAG2016. Implemented by: Germinate Used by: Flapjack, Cassavabase See &lt;a href&#x3D;\&quot;#introduction/search-services\&quot;&gt;Search Services&lt;/a&gt; for additional implementation details. Get list of studies StartDate and endDate should be ISO8601 format for dates: YYYY-MM-DD &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies-search&lt;/a&gt;
   * @param studyType Filter based on study type e.g. Nursery, Trial or Genotype.   * @param programDbId Program filter to only return studies associated with given program id.   * @param locationDbId Filter by location   * @param seasonDbId Filter by season or year   * @param trialDbId Filter by trial   * @param studyDbId Filter by study DbId   * @param germplasmDbIds Filter studies where specified germplasm have been used/tested   * @param observationVariableDbIds Filter studies where specified observation variables have been measured   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.   * @param active Filter active status true/false.   * @param sortBy Sort order. Name of the field to sort by.   * @param sortOrder Sort order direction. Ascending/Descending.
  */
  public void studiesSearchGet (String studyType, String programDbId, String locationDbId, String seasonDbId, String trialDbId, String studyDbId, List<String> germplasmDbIds, List<String> observationVariableDbIds, Integer pageSize, Integer page, Boolean active, String sortBy, String sortOrder, final Response.Listener<StudiesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/studies-search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "studyType", studyType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "programDbId", programDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "locationDbId", locationDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "seasonDbId", seasonDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "trialDbId", trialDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "studyDbId", studyDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "germplasmDbIds", germplasmDbIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "observationVariableDbIds", observationVariableDbIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "active", active));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sortBy", sortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sortOrder", sortOrder));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StudiesResponse) ApiInvoker.deserialize(localVarResponse,  "", StudiesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Search Studies (GET)
  *  Scope: PHENOTYPING. Status: ACCEPTED. Implementation target date: PAG2016. Implemented by: Germinate Used by: Flapjack, Cassavabase See &lt;a href&#x3D;\&quot;#introduction/search-services\&quot;&gt;Search Services&lt;/a&gt; for additional implementation details. Get list of studies StartDate and endDate should be ISO8601 format for dates: YYYY-MM-DD &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies-search&lt;/a&gt;
   * @param studySearchRequest Study Search request
   * @return StudiesResponse
  */
  public StudiesResponse studiesSearchPost (StudySearchRequest studySearchRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = studySearchRequest;

    // create path and map variables
    String path = "/studies-search";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (StudiesResponse) ApiInvoker.deserialize(localVarResponse, "", StudiesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Search Studies (GET)
   *  Scope: PHENOTYPING. Status: ACCEPTED. Implementation target date: PAG2016. Implemented by: Germinate Used by: Flapjack, Cassavabase See &lt;a href&#x3D;\&quot;#introduction/search-services\&quot;&gt;Search Services&lt;/a&gt; for additional implementation details. Get list of studies StartDate and endDate should be ISO8601 format for dates: YYYY-MM-DD &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies-search&lt;/a&gt;
   * @param studySearchRequest Study Search request
  */
  public void studiesSearchPost (StudySearchRequest studySearchRequest, final Response.Listener<StudiesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = studySearchRequest;


    // create path and map variables
    String path = "/studies-search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StudiesResponse) ApiInvoker.deserialize(localVarResponse,  "", StudiesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Study Germplasm Details
  *  Scope: PHENOTYPING &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/germplasm&lt;/a&gt;
   * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric.
   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.
   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
   * @return GermplasmSummaryListResponse
  */
  public GermplasmSummaryListResponse studiesStudyDbIdGermplasmGet (String studyDbId, Integer pageSize, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdGermplasmGet",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdGermplasmGet"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/germplasm".replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GermplasmSummaryListResponse) ApiInvoker.deserialize(localVarResponse, "", GermplasmSummaryListResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Study Germplasm Details
   *  Scope: PHENOTYPING &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/germplasm&lt;/a&gt;
   * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric.   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
  */
  public void studiesStudyDbIdGermplasmGet (String studyDbId, Integer pageSize, Integer page, final Response.Listener<GermplasmSummaryListResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdGermplasmGet",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdGermplasmGet"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/germplasm".replaceAll("\\{format\\}","json").replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GermplasmSummaryListResponse) ApiInvoker.deserialize(localVarResponse,  "", GermplasmSummaryListResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve study details
  *  Scope: PHENOTYPING. Status: ACCEPTED. Implemented by: Germinate, GnpIS Notes: an additionalInfo field was added to provide a controlled vocabulary for less common data fields. Retrieve the information of the study required for field data collection More linked data: * observation variables: &#x60;&#x60;&#x60;/brapi/v1/studies/{studyDbId}/observationVariables&#x60;&#x60;&#x60; * germplasm: &#x60;&#x60;&#x60;/brapi/v1/studies/{studyDbId}/germplasm&#x60;&#x60;&#x60; * observation units: &#x60;&#x60;&#x60;/brapi/v1/studies/{studyDbId}/observationUnits&#x60;&#x60;&#x60; * layout: &#x60;&#x60;&#x60;brapi/v1/studies/{studyDbId}/layout&#x60;&#x60;&#x60; &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}&lt;/a&gt;
   * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric.
   * @return StudyResponse
  */
  public StudyResponse studiesStudyDbIdGet (String studyDbId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdGet",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdGet"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}".replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (StudyResponse) ApiInvoker.deserialize(localVarResponse, "", StudyResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve study details
   *  Scope: PHENOTYPING. Status: ACCEPTED. Implemented by: Germinate, GnpIS Notes: an additionalInfo field was added to provide a controlled vocabulary for less common data fields. Retrieve the information of the study required for field data collection More linked data: * observation variables: &#x60;&#x60;&#x60;/brapi/v1/studies/{studyDbId}/observationVariables&#x60;&#x60;&#x60; * germplasm: &#x60;&#x60;&#x60;/brapi/v1/studies/{studyDbId}/germplasm&#x60;&#x60;&#x60; * observation units: &#x60;&#x60;&#x60;/brapi/v1/studies/{studyDbId}/observationUnits&#x60;&#x60;&#x60; * layout: &#x60;&#x60;&#x60;brapi/v1/studies/{studyDbId}/layout&#x60;&#x60;&#x60; &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}&lt;/a&gt;
   * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric.
  */
  public void studiesStudyDbIdGet (String studyDbId, final Response.Listener<StudyResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdGet",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdGet"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StudyResponse) ApiInvoker.deserialize(localVarResponse,  "", StudyResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve plot layout details
  *  Retrive the layout details for a study. Returns an array of observation unit position data which describes where each unit and germplasm is located within the study layout Retrieve the plot layout of the study with id {id}. For each observationUnit within a study, return the &#x60;block&#x60;, &#x60;replicate&#x60;, and &#x60;entryType&#x60; values as well as the &#x60;X&#x60; and &#x60;Y&#x60; coordinates. &#x60;entryType&#x60; can be \&quot;check\&quot;, \&quot;test\&quot;, or \&quot;filler\&quot;. Also return some human readable meta data about the observationUnit and germplasm. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/layout&lt;/a&gt; 
   * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric.
   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.
   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
   * @return ObservationUnitPositionsResponse
  */
  public ObservationUnitPositionsResponse studiesStudyDbIdLayoutGet (String studyDbId, Integer pageSize, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdLayoutGet",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdLayoutGet"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/layout".replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ObservationUnitPositionsResponse) ApiInvoker.deserialize(localVarResponse, "", ObservationUnitPositionsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve plot layout details
   *  Retrive the layout details for a study. Returns an array of observation unit position data which describes where each unit and germplasm is located within the study layout Retrieve the plot layout of the study with id {id}. For each observationUnit within a study, return the &#x60;block&#x60;, &#x60;replicate&#x60;, and &#x60;entryType&#x60; values as well as the &#x60;X&#x60; and &#x60;Y&#x60; coordinates. &#x60;entryType&#x60; can be \&quot;check\&quot;, \&quot;test\&quot;, or \&quot;filler\&quot;. Also return some human readable meta data about the observationUnit and germplasm. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/layout&lt;/a&gt; 
   * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric.   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
  */
  public void studiesStudyDbIdLayoutGet (String studyDbId, Integer pageSize, Integer page, final Response.Listener<ObservationUnitPositionsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdLayoutGet",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdLayoutGet"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/layout".replaceAll("\\{format\\}","json").replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ObservationUnitPositionsResponse) ApiInvoker.deserialize(localVarResponse,  "", ObservationUnitPositionsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve plot layout details
  *  Modify a study layout Update the layout data for a set of observation units within a study. Each layout object is a subset of fields within an observationUnit, so it doesnt make sense to create a new layout object by itself. Implementation Notes: + If any of the fields in the request object is missing, that piece of data will not be updated. + If an observationUnitDbId can not be found within the given study, an error will be returned. + &#x60;entryType&#x60; can have the values \&quot;check\&quot;, \&quot;test\&quot;, or \&quot;filler\&quot;. + The response should match the structure of the response from &#x60;GET studies/{studyDbId}/layout&#x60;, but it should only contain the layout objects which have been updated by the PUT request. Also, pagination is not available in the response. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/layout&lt;/a&gt; 
   * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric.
   * @param studyLayoutRequest The request body for updateing a study layout
   * @return ObservationUnitPositionsResponse
  */
  public ObservationUnitPositionsResponse studiesStudyDbIdLayoutPut (String studyDbId, StudyLayoutRequest studyLayoutRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = studyLayoutRequest;
    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdLayoutPut",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdLayoutPut"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/layout".replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ObservationUnitPositionsResponse) ApiInvoker.deserialize(localVarResponse, "", ObservationUnitPositionsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve plot layout details
   *  Modify a study layout Update the layout data for a set of observation units within a study. Each layout object is a subset of fields within an observationUnit, so it doesnt make sense to create a new layout object by itself. Implementation Notes: + If any of the fields in the request object is missing, that piece of data will not be updated. + If an observationUnitDbId can not be found within the given study, an error will be returned. + &#x60;entryType&#x60; can have the values \&quot;check\&quot;, \&quot;test\&quot;, or \&quot;filler\&quot;. + The response should match the structure of the response from &#x60;GET studies/{studyDbId}/layout&#x60;, but it should only contain the layout objects which have been updated by the PUT request. Also, pagination is not available in the response. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/layout&lt;/a&gt; 
   * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric.   * @param studyLayoutRequest The request body for updateing a study layout
  */
  public void studiesStudyDbIdLayoutPut (String studyDbId, StudyLayoutRequest studyLayoutRequest, final Response.Listener<ObservationUnitPositionsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = studyLayoutRequest;

    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdLayoutPut",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdLayoutPut"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/layout".replaceAll("\\{format\\}","json").replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ObservationUnitPositionsResponse) ApiInvoker.deserialize(localVarResponse,  "", ObservationUnitPositionsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * &lt;strong&gt;Deprecated&lt;/strong&gt; Retrieve study observation variables
  *   &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/observationVariables&lt;/a&gt;
   * @param studyDbId string database unique identifier
   * @return StudyObservationVariablesResponse
  */
  public StudyObservationVariablesResponse studiesStudyDbIdObservationVariablesGet (String studyDbId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationVariablesGet",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationVariablesGet"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/observationVariables".replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (StudyObservationVariablesResponse) ApiInvoker.deserialize(localVarResponse, "", StudyObservationVariablesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * &lt;strong&gt;Deprecated&lt;/strong&gt; Retrieve study observation variables
   *   &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/observationVariables&lt;/a&gt;
   * @param studyDbId string database unique identifier
  */
  public void studiesStudyDbIdObservationVariablesGet (String studyDbId, final Response.Listener<StudyObservationVariablesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationVariablesGet",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationVariablesGet"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/observationVariables".replaceAll("\\{format\\}","json").replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StudyObservationVariablesResponse) ApiInvoker.deserialize(localVarResponse,  "", StudyObservationVariablesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Observation Units by observation variable ids
  *  Retrieve all observations where there are measurements for the given observation variables. observationTimestamp should be ISO8601 format with timezone: YYYY-MM-DDThh:mm:ss+hhmm &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/observations&lt;/a&gt;
   * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric.
   * @param observationVariableDbIds Numeric &#x60;id&#x60; of that variable (combination of trait, unit and method)
   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.
   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
   * @return ObservationsResponse
  */
  public ObservationsResponse studiesStudyDbIdObservationsGet (String studyDbId, List<String> observationVariableDbIds, Integer pageSize, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationsGet",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationsGet"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/observations".replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "observationVariableDbIds", observationVariableDbIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ObservationsResponse) ApiInvoker.deserialize(localVarResponse, "", ObservationsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Observation Units by observation variable ids
   *  Retrieve all observations where there are measurements for the given observation variables. observationTimestamp should be ISO8601 format with timezone: YYYY-MM-DDThh:mm:ss+hhmm &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/observations&lt;/a&gt;
   * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric.   * @param observationVariableDbIds Numeric &#x60;id&#x60; of that variable (combination of trait, unit and method)   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
  */
  public void studiesStudyDbIdObservationsGet (String studyDbId, List<String> observationVariableDbIds, Integer pageSize, Integer page, final Response.Listener<ObservationsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationsGet",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationsGet"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/observations".replaceAll("\\{format\\}","json").replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "observationVariableDbIds", observationVariableDbIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ObservationsResponse) ApiInvoker.deserialize(localVarResponse,  "", ObservationsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Observation Units by observation variable ids
  *  Implementation Guidelines: + If an &#x60;observationDbId&#x60; is \&quot;null\&quot; or an empty string in the request, a NEW observation should be created for the given study and observationUnit + If an &#x60;observationDbId&#x60; is populated but not found in the database, a NEW observation should be created for the given study and observationUnit AND an NEW &#x60;observationDbId&#x60; should be assigned to it. A warning should be returned to the client. + If an &#x60;observationDbId&#x60; is populated and found in the database, but the existing entry is not associated with the given study or observationUnit, a NEW observation should be created for the given study and observationUnit AND an NEW &#x60;observationDbId&#x60; should be assigned to it. A warning should be returned to the client. + If an &#x60;observationDbId&#x60; is populated and found in the database and is associated with the given study and observationUnit, then it should be updated with the new data given. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/observations&lt;/a&gt;
   * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric.
   * @param newObservations 
   * @return NewObservationDbIdsResponse
  */
  public NewObservationDbIdsResponse studiesStudyDbIdObservationsPut (String studyDbId, NewObservationsRequest newObservations) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = newObservations;
    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationsPut",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationsPut"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/observations".replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (NewObservationDbIdsResponse) ApiInvoker.deserialize(localVarResponse, "", NewObservationDbIdsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Observation Units by observation variable ids
   *  Implementation Guidelines: + If an &#x60;observationDbId&#x60; is \&quot;null\&quot; or an empty string in the request, a NEW observation should be created for the given study and observationUnit + If an &#x60;observationDbId&#x60; is populated but not found in the database, a NEW observation should be created for the given study and observationUnit AND an NEW &#x60;observationDbId&#x60; should be assigned to it. A warning should be returned to the client. + If an &#x60;observationDbId&#x60; is populated and found in the database, but the existing entry is not associated with the given study or observationUnit, a NEW observation should be created for the given study and observationUnit AND an NEW &#x60;observationDbId&#x60; should be assigned to it. A warning should be returned to the client. + If an &#x60;observationDbId&#x60; is populated and found in the database and is associated with the given study and observationUnit, then it should be updated with the new data given. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/observations&lt;/a&gt;
   * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric.   * @param newObservations 
  */
  public void studiesStudyDbIdObservationsPut (String studyDbId, NewObservationsRequest newObservations, final Response.Listener<NewObservationDbIdsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = newObservations;

    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationsPut",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationsPut"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/observations".replaceAll("\\{format\\}","json").replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((NewObservationDbIdsResponse) ApiInvoker.deserialize(localVarResponse,  "", NewObservationDbIdsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all observation units
  *  The main API call for field data collection, to retrieve all the observation units within a study. Scope: PHENOTYPING &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/observationunits&lt;/a&gt;
   * @param studyDbId The study these observation units are related to.
   * @param observationLevel The granularity level of observation units. Either &#x60;plotNumber&#x60; or &#x60;plantNumber&#x60; fields will be relavant depending on whether granularity is plot or plant respectively.
   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.
   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
   * @return ObservationUnitsResponse1
  */
  public ObservationUnitsResponse1 studiesStudyDbIdObservationunitsGet (String studyDbId, String observationLevel, Integer pageSize, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsGet",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsGet"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/observationunits".replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "observationLevel", observationLevel));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ObservationUnitsResponse1) ApiInvoker.deserialize(localVarResponse, "", ObservationUnitsResponse1.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all observation units
   *  The main API call for field data collection, to retrieve all the observation units within a study. Scope: PHENOTYPING &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/observationunits&lt;/a&gt;
   * @param studyDbId The study these observation units are related to.   * @param observationLevel The granularity level of observation units. Either &#x60;plotNumber&#x60; or &#x60;plantNumber&#x60; fields will be relavant depending on whether granularity is plot or plant respectively.   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
  */
  public void studiesStudyDbIdObservationunitsGet (String studyDbId, String observationLevel, Integer pageSize, Integer page, final Response.Listener<ObservationUnitsResponse1> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsGet",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsGet"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/observationunits".replaceAll("\\{format\\}","json").replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "observationLevel", observationLevel));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ObservationUnitsResponse1) ApiInvoker.deserialize(localVarResponse,  "", ObservationUnitsResponse1.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * &lt;strong&gt;Deprecated&lt;/strong&gt; Save Observation Unit Phenotypes
  * This call has been deprecated in V1.1. Use instead: \&quot;PUT /studies/{studyDbId}/observationunits\&quot; and \&quot;PUT /studies/{studyDbId}/observationunits/zip\&quot;
   * @param studyDbId The study these observation units are related to.
   * @param format (default is JSON, but can be zip) In case where JSON data is zipped for faster transfer speed (as in the case of the IRRI handheld implementation), the zipped JSON file will be listed in datafiles. The zipped file contains a JSON file with the same structure as the BrAPI call.
   * @param body 
   * @return void
  */
  public void studiesStudyDbIdObservationunitsPost (String studyDbId, String format, NewObservationsRequestWrapperDeprecated body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsPost",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsPost"));
    }
    // verify the required parameter 'format' is set
    if (format == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'format' when calling studiesStudyDbIdObservationunitsPost",
        new ApiException(400, "Missing the required parameter 'format' when calling studiesStudyDbIdObservationunitsPost"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/observationunits".replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * &lt;strong&gt;Deprecated&lt;/strong&gt; Save Observation Unit Phenotypes
   * This call has been deprecated in V1.1. Use instead: \&quot;PUT /studies/{studyDbId}/observationunits\&quot; and \&quot;PUT /studies/{studyDbId}/observationunits/zip\&quot;
   * @param studyDbId The study these observation units are related to.   * @param format (default is JSON, but can be zip) In case where JSON data is zipped for faster transfer speed (as in the case of the IRRI handheld implementation), the zipped JSON file will be listed in datafiles. The zipped file contains a JSON file with the same structure as the BrAPI call.   * @param body 
  */
  public void studiesStudyDbIdObservationunitsPost (String studyDbId, String format, NewObservationsRequestWrapperDeprecated body, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsPost",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsPost"));
    }
    // verify the required parameter 'format' is set
    if (format == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'format' when calling studiesStudyDbIdObservationunitsPost",
        new ApiException(400, "Missing the required parameter 'format' when calling studiesStudyDbIdObservationunitsPost"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/observationunits".replaceAll("\\{format\\}","json").replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Save Observation Unit Phenotypes
  * Use this call for uploading new Observations as JSON to a system.  Note: If &#39;observationUnitDbId&#39; or &#39;observationDbId&#39; is populated, they should be considered updates to existing records. If an existing record of that DbId is not found, the document should be treated as new records and assigned new DbIds. If &#39;observationUnitDbId&#39; or &#39;observationDbId&#39; is un-populated (empty string or null) the document should be treated as new records and assigned new DbIds.
   * @param studyDbId The study these observation units are related to.
   * @param newObservationUnitRequest 
   * @return NewObservationUnitDbIdsResponse
  */
  public NewObservationUnitDbIdsResponse studiesStudyDbIdObservationunitsPut (String studyDbId, List<NewObservationUnitRequest> newObservationUnitRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = newObservationUnitRequest;
    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsPut",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsPut"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/observationunits".replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (NewObservationUnitDbIdsResponse) ApiInvoker.deserialize(localVarResponse, "", NewObservationUnitDbIdsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Save Observation Unit Phenotypes
   * Use this call for uploading new Observations as JSON to a system.  Note: If &#39;observationUnitDbId&#39; or &#39;observationDbId&#39; is populated, they should be considered updates to existing records. If an existing record of that DbId is not found, the document should be treated as new records and assigned new DbIds. If &#39;observationUnitDbId&#39; or &#39;observationDbId&#39; is un-populated (empty string or null) the document should be treated as new records and assigned new DbIds.
   * @param studyDbId The study these observation units are related to.   * @param newObservationUnitRequest 
  */
  public void studiesStudyDbIdObservationunitsPut (String studyDbId, List<NewObservationUnitRequest> newObservationUnitRequest, final Response.Listener<NewObservationUnitDbIdsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = newObservationUnitRequest;

    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsPut",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsPut"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/observationunits".replaceAll("\\{format\\}","json").replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((NewObservationUnitDbIdsResponse) ApiInvoker.deserialize(localVarResponse,  "", NewObservationUnitDbIdsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Use this call for uploading new Observations as a Batched Zip File to a system.
  * Note: If &#39;observationUnitDbId&#39; or &#39;observationDbId&#39; is populated, they should be considered updates to existing records. If an existing record of that DbId is not found, the document should be treated as new records and assigned new DbIds. If &#39;observationUnitDbId&#39; or &#39;observationDbId&#39; is un-populated (empty string or null) the document should be treated as new records and assigned new DbIds.
   * @param studyDbId The study these observation units are related to.
   * @param zipRequest 
   * @return NewObservationUnitDbIdsResponse
  */
  public NewObservationUnitDbIdsResponse studiesStudyDbIdObservationunitsZipPost (String studyDbId, byte[] zipRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = zipRequest;
    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsZipPost",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsZipPost"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/observationunits/zip".replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/zip"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (NewObservationUnitDbIdsResponse) ApiInvoker.deserialize(localVarResponse, "", NewObservationUnitDbIdsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Use this call for uploading new Observations as a Batched Zip File to a system.
   * Note: If &#39;observationUnitDbId&#39; or &#39;observationDbId&#39; is populated, they should be considered updates to existing records. If an existing record of that DbId is not found, the document should be treated as new records and assigned new DbIds. If &#39;observationUnitDbId&#39; or &#39;observationDbId&#39; is un-populated (empty string or null) the document should be treated as new records and assigned new DbIds.
   * @param studyDbId The study these observation units are related to.   * @param zipRequest 
  */
  public void studiesStudyDbIdObservationunitsZipPost (String studyDbId, byte[] zipRequest, final Response.Listener<NewObservationUnitDbIdsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = zipRequest;

    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsZipPost",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationunitsZipPost"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/observationunits/zip".replaceAll("\\{format\\}","json").replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/zip"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((NewObservationUnitDbIdsResponse) ApiInvoker.deserialize(localVarResponse,  "", NewObservationUnitDbIdsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Observation Variables By Study
  *  Scope: PHENOTYPING List all the observation variables measured in the study. Refer to the data type definition of variables in &#x60;/Specification/ObservationVariables/README.md&#x60;. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/observationvariables&lt;/a&gt;
   * @param studyDbId string database unique identifier
   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.
   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
   * @return StudyObservationVariablesResponse
  */
  public StudyObservationVariablesResponse studiesStudyDbIdObservationvariablesGet (String studyDbId, Integer pageSize, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationvariablesGet",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationvariablesGet"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/observationvariables".replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (StudyObservationVariablesResponse) ApiInvoker.deserialize(localVarResponse, "", StudyObservationVariablesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Observation Variables By Study
   *  Scope: PHENOTYPING List all the observation variables measured in the study. Refer to the data type definition of variables in &#x60;/Specification/ObservationVariables/README.md&#x60;. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/observationvariables&lt;/a&gt;
   * @param studyDbId string database unique identifier   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
  */
  public void studiesStudyDbIdObservationvariablesGet (String studyDbId, Integer pageSize, Integer page, final Response.Listener<StudyObservationVariablesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationvariablesGet",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdObservationvariablesGet"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/observationvariables".replaceAll("\\{format\\}","json").replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StudyObservationVariablesResponse) ApiInvoker.deserialize(localVarResponse,  "", StudyObservationVariablesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve study Observation Units as table
  *  Scope: PHENOTYPING. Status: ACCEPTED. Implemented in Cassavabase, HIDAP and Germinate. Notes: Implementation target date: after PAG2016 Retrieve the details of the study required for field data collection. Includes actual trait data. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/table&lt;/a&gt;
   * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric.
   * @param format The format parameter will cause the data to be dumped to a file in the specified format. Currently, tsv and csv are supported.
   * @return StudyobservationsTableResponse
  */
  public StudyobservationsTableResponse studiesStudyDbIdTableGet (String studyDbId, String format) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdTableGet",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdTableGet"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/table".replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (StudyobservationsTableResponse) ApiInvoker.deserialize(localVarResponse, "", StudyobservationsTableResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve study Observation Units as table
   *  Scope: PHENOTYPING. Status: ACCEPTED. Implemented in Cassavabase, HIDAP and Germinate. Notes: Implementation target date: after PAG2016 Retrieve the details of the study required for field data collection. Includes actual trait data. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/table&lt;/a&gt;
   * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric.   * @param format The format parameter will cause the data to be dumped to a file in the specified format. Currently, tsv and csv are supported.
  */
  public void studiesStudyDbIdTableGet (String studyDbId, String format, final Response.Listener<StudyobservationsTableResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdTableGet",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdTableGet"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/table".replaceAll("\\{format\\}","json").replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StudyobservationsTableResponse) ApiInvoker.deserialize(localVarResponse,  "", StudyobservationsTableResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Save study Observation Units as table
  *  This call can be used to create new observations in bulk. Note: If you need to update any existing observation, please use &#x60;PUT /studies/{studyDbId}/observations&#x60;. This call should only be used to create NEW observations. Implementation Guidelines: + All observations submitted through this call should create NEW observation records in the database under the given observation unit. + Each \&quot;observationUnitDbId\&quot; listed should already exist in the database. If the server can not find a given \&quot;observationUnitDbId\&quot;, it should report an error. (see Error Handling) + The response of this call should be the set of \&quot;observationDbIds\&quot; created from this call, along with the associated \&quot;observationUnitDbId\&quot; and \&quot;observationVariableDbId\&quot; that each observation is associated with. Images can optionally be saved using this call by providing a zipped file of all images in the datafiles. The physical zipped file should be transferred as well in the mulit-part form data. Scope: PHENOTYPING 
   * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric.
   * @param newObservationsTableRequest 
   * @return NewObservationDbIdsResponse
  */
  public NewObservationDbIdsResponse studiesStudyDbIdTablePost (String studyDbId, NewObservationsTableRequest newObservationsTableRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = newObservationsTableRequest;
    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdTablePost",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdTablePost"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/table".replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (NewObservationDbIdsResponse) ApiInvoker.deserialize(localVarResponse, "", NewObservationDbIdsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Save study Observation Units as table
   *  This call can be used to create new observations in bulk. Note: If you need to update any existing observation, please use &#x60;PUT /studies/{studyDbId}/observations&#x60;. This call should only be used to create NEW observations. Implementation Guidelines: + All observations submitted through this call should create NEW observation records in the database under the given observation unit. + Each \&quot;observationUnitDbId\&quot; listed should already exist in the database. If the server can not find a given \&quot;observationUnitDbId\&quot;, it should report an error. (see Error Handling) + The response of this call should be the set of \&quot;observationDbIds\&quot; created from this call, along with the associated \&quot;observationUnitDbId\&quot; and \&quot;observationVariableDbId\&quot; that each observation is associated with. Images can optionally be saved using this call by providing a zipped file of all images in the datafiles. The physical zipped file should be transferred as well in the mulit-part form data. Scope: PHENOTYPING 
   * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric.   * @param newObservationsTableRequest 
  */
  public void studiesStudyDbIdTablePost (String studyDbId, NewObservationsTableRequest newObservationsTableRequest, final Response.Listener<NewObservationDbIdsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = newObservationsTableRequest;

    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdTablePost",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdTablePost"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/table".replaceAll("\\{format\\}","json").replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((NewObservationDbIdsResponse) ApiInvoker.deserialize(localVarResponse,  "", NewObservationDbIdsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * &lt;strong&gt;Deprecated&lt;/strong&gt; List study types
  *  Call to retrieve the list of study types. Scope: PHENOTYPING. Implementation target date: PAG2016 
   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.
   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
   * @return StudyTypesResponse
  */
  public StudyTypesResponse studyTypesGet (Integer pageSize, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/studyTypes";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (StudyTypesResponse) ApiInvoker.deserialize(localVarResponse, "", StudyTypesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * &lt;strong&gt;Deprecated&lt;/strong&gt; List study types
   *  Call to retrieve the list of study types. Scope: PHENOTYPING. Implementation target date: PAG2016 
   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
  */
  public void studyTypesGet (Integer pageSize, Integer page, final Response.Listener<StudyTypesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/studyTypes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StudyTypesResponse) ApiInvoker.deserialize(localVarResponse,  "", StudyTypesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List study types
  *  Call to retrieve the list of study types. Scope: PHENOTYPING. Implementation target date: PAG2016 &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studytypes\&quot;&gt; test-server.brapi.org/brapi/v1/studytypes&lt;/a&gt;
   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.
   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
   * @return StudyTypesResponse
  */
  public StudyTypesResponse studytypesGet (Integer pageSize, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/studytypes";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (StudyTypesResponse) ApiInvoker.deserialize(localVarResponse, "", StudyTypesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List study types
   *  Call to retrieve the list of study types. Scope: PHENOTYPING. Implementation target date: PAG2016 &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studytypes\&quot;&gt; test-server.brapi.org/brapi/v1/studytypes&lt;/a&gt;
   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
  */
  public void studytypesGet (Integer pageSize, Integer page, final Response.Listener<StudyTypesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/studytypes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StudyTypesResponse) ApiInvoker.deserialize(localVarResponse,  "", StudyTypesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
