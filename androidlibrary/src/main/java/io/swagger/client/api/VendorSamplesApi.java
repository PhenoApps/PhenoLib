/**
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.VendorPlateRequest;
import io.swagger.client.model.VendorPlateResponse;
import io.swagger.client.model.VendorPlateSearchRequest;
import io.swagger.client.model.VendorPlatesResponse;
import io.swagger.client.model.VendorSpecificationResponse;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class VendorSamplesApi {
  String basePath = "https://test-server.brapi.org/brapi/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Register plates
  * Note: if the samples array is empty, plate ID will be returned. Samples can be updated later.
   * @param body 
   * @return VendorPlatesResponse
  */
  public VendorPlatesResponse vendorPlatesPost (VendorPlateRequest body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;

    // create path and map variables
    String path = "/vendor/plates";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (VendorPlatesResponse) ApiInvoker.deserialize(localVarResponse, "", VendorPlatesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Register plates
   * Note: if the samples array is empty, plate ID will be returned. Samples can be updated later.
   * @param body 
  */
  public void vendorPlatesPost (VendorPlateRequest body, final Response.Listener<VendorPlatesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;


    // create path and map variables
    String path = "/vendor/plates".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((VendorPlatesResponse) ApiInvoker.deserialize(localVarResponse,  "", VendorPlatesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Search for plates
  * Search for plates in the database.  &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/vendor/plates-search\&quot;&gt; test-server.brapi.org/brapi/v1/vendor/plates-search&lt;/a&gt;
   * @param vendorProjectDbId 
   * @param vendorPlateDbId 
   * @param clientPlateDbId 
   * @param sampleInfo 
   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.
   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
   * @return VendorPlatesResponse
  */
  public VendorPlatesResponse vendorPlatesSearchGet (String vendorProjectDbId, String vendorPlateDbId, String clientPlateDbId, Boolean sampleInfo, Integer pageSize, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/vendor/plates-search";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "vendorProjectDbId", vendorProjectDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "vendorPlateDbId", vendorPlateDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "clientPlateDbId", clientPlateDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sampleInfo", sampleInfo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (VendorPlatesResponse) ApiInvoker.deserialize(localVarResponse, "", VendorPlatesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Search for plates
   * Search for plates in the database.  &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/vendor/plates-search\&quot;&gt; test-server.brapi.org/brapi/v1/vendor/plates-search&lt;/a&gt;
   * @param vendorProjectDbId    * @param vendorPlateDbId    * @param clientPlateDbId    * @param sampleInfo    * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
  */
  public void vendorPlatesSearchGet (String vendorProjectDbId, String vendorPlateDbId, String clientPlateDbId, Boolean sampleInfo, Integer pageSize, Integer page, final Response.Listener<VendorPlatesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/vendor/plates-search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "vendorProjectDbId", vendorProjectDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "vendorPlateDbId", vendorPlateDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "clientPlateDbId", clientPlateDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sampleInfo", sampleInfo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((VendorPlatesResponse) ApiInvoker.deserialize(localVarResponse,  "", VendorPlatesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Search for plates
  * Search for plates in the database.  &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/vendor\&quot;&gt; test-server.brapi.org/brapi/v1/vendor/plate-search&lt;/a&gt;
   * @param body 
   * @return VendorPlatesResponse
  */
  public VendorPlatesResponse vendorPlatesSearchPost (VendorPlateSearchRequest body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;

    // create path and map variables
    String path = "/vendor/plates-search";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (VendorPlatesResponse) ApiInvoker.deserialize(localVarResponse, "", VendorPlatesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Search for plates
   * Search for plates in the database.  &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/vendor\&quot;&gt; test-server.brapi.org/brapi/v1/vendor/plate-search&lt;/a&gt;
   * @param body 
  */
  public void vendorPlatesSearchPost (VendorPlateSearchRequest body, final Response.Listener<VendorPlatesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;


    // create path and map variables
    String path = "/vendor/plates-search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((VendorPlatesResponse) ApiInvoker.deserialize(localVarResponse,  "", VendorPlatesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Plate Details by vendorPlateId
  *  Response data types   &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Variable&lt;/th&gt; &lt;th&gt;Datatype&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;th&gt;Required&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;metadata&lt;/td&gt; &lt;td&gt;object&lt;/td&gt; &lt;td&gt;pagination, status&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;pagination&lt;/td&gt; &lt;td&gt;object&lt;/td&gt; &lt;td&gt;pageSize, currentPage, totalCount, totalPages&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;status&lt;/td&gt; &lt;td&gt;list&lt;/td&gt; &lt;td&gt;code, message&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;result&lt;/td&gt; &lt;td&gt;Object&lt;/td&gt; &lt;td&gt;Object containing MCPD data&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;vendorProjectDbId&lt;/td&gt; &lt;td&gt;string&lt;/td&gt; &lt;td&gt;the name or identifier given to a project by the vendor&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;vendorPlateDbId&lt;/td&gt; &lt;td&gt;string&lt;/td&gt; &lt;td&gt;the name or identifier of the plate, given by the vendor&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;clientPlateDbId&lt;/td&gt; &lt;td&gt;string&lt;/td&gt; &lt;td&gt;the name of the plate, given by the client&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;barcode&lt;/td&gt; &lt;td&gt;string&lt;/td&gt; &lt;td&gt;a string that can be represented as a barcode, identifying this plate&lt;/td&gt; &lt;td&gt;N&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;plateFormat&lt;/td&gt; &lt;td&gt;string&lt;/td&gt; &lt;td&gt;defines that plate format, usually Plate_96 or tubes for plateless format&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;sampleType&lt;/td&gt; &lt;td&gt;string&lt;/td&gt; &lt;td&gt;DNA or RNA or Tissue, etc.&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;status&lt;/td&gt; &lt;td&gt;string&lt;/td&gt; &lt;td&gt;The status of the plate in the processing pipeline. Typically,  &amp;quot;Received&amp;quot;, &amp;quot;Processing&amp;quot;, &amp;quot;QC_passed&amp;quot;, QC_failed&amp;quot;, &amp;quot;Completed&amp;quot; (as per vendor-requirements call)&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;samples&lt;/td&gt; &lt;td&gt;Array&lt;/td&gt; &lt;td&gt;list of samples in the plate&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;  &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/vendor\&quot;&gt; test-server.brapi.org/brapi/v1/vendor/plate/{vendorPlateDbId}&lt;/a&gt;
   * @param vendorPlateDbId The plate ID defined by the vendor
   * @return VendorPlateResponse
  */
  public VendorPlateResponse vendorPlatesVendorPlateDbIdGet (String vendorPlateDbId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'vendorPlateDbId' is set
    if (vendorPlateDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vendorPlateDbId' when calling vendorPlatesVendorPlateDbIdGet",
        new ApiException(400, "Missing the required parameter 'vendorPlateDbId' when calling vendorPlatesVendorPlateDbIdGet"));
    }

    // create path and map variables
    String path = "/vendor/plates/{vendorPlateDbId}".replaceAll("\\{" + "vendorPlateDbId" + "\\}", apiInvoker.escapeString(vendorPlateDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (VendorPlateResponse) ApiInvoker.deserialize(localVarResponse, "", VendorPlateResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Plate Details by vendorPlateId
   *  Response data types   &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Variable&lt;/th&gt; &lt;th&gt;Datatype&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;th&gt;Required&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;metadata&lt;/td&gt; &lt;td&gt;object&lt;/td&gt; &lt;td&gt;pagination, status&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;pagination&lt;/td&gt; &lt;td&gt;object&lt;/td&gt; &lt;td&gt;pageSize, currentPage, totalCount, totalPages&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;status&lt;/td&gt; &lt;td&gt;list&lt;/td&gt; &lt;td&gt;code, message&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;result&lt;/td&gt; &lt;td&gt;Object&lt;/td&gt; &lt;td&gt;Object containing MCPD data&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;vendorProjectDbId&lt;/td&gt; &lt;td&gt;string&lt;/td&gt; &lt;td&gt;the name or identifier given to a project by the vendor&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;vendorPlateDbId&lt;/td&gt; &lt;td&gt;string&lt;/td&gt; &lt;td&gt;the name or identifier of the plate, given by the vendor&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;clientPlateDbId&lt;/td&gt; &lt;td&gt;string&lt;/td&gt; &lt;td&gt;the name of the plate, given by the client&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;barcode&lt;/td&gt; &lt;td&gt;string&lt;/td&gt; &lt;td&gt;a string that can be represented as a barcode, identifying this plate&lt;/td&gt; &lt;td&gt;N&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;plateFormat&lt;/td&gt; &lt;td&gt;string&lt;/td&gt; &lt;td&gt;defines that plate format, usually Plate_96 or tubes for plateless format&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;sampleType&lt;/td&gt; &lt;td&gt;string&lt;/td&gt; &lt;td&gt;DNA or RNA or Tissue, etc.&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;status&lt;/td&gt; &lt;td&gt;string&lt;/td&gt; &lt;td&gt;The status of the plate in the processing pipeline. Typically,  &amp;quot;Received&amp;quot;, &amp;quot;Processing&amp;quot;, &amp;quot;QC_passed&amp;quot;, QC_failed&amp;quot;, &amp;quot;Completed&amp;quot; (as per vendor-requirements call)&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;samples&lt;/td&gt; &lt;td&gt;Array&lt;/td&gt; &lt;td&gt;list of samples in the plate&lt;/td&gt; &lt;td&gt;Y&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;  &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/vendor\&quot;&gt; test-server.brapi.org/brapi/v1/vendor/plate/{vendorPlateDbId}&lt;/a&gt;
   * @param vendorPlateDbId The plate ID defined by the vendor
  */
  public void vendorPlatesVendorPlateDbIdGet (String vendorPlateDbId, final Response.Listener<VendorPlateResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'vendorPlateDbId' is set
    if (vendorPlateDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vendorPlateDbId' when calling vendorPlatesVendorPlateDbIdGet",
        new ApiException(400, "Missing the required parameter 'vendorPlateDbId' when calling vendorPlatesVendorPlateDbIdGet"));
    }

    // create path and map variables
    String path = "/vendor/plates/{vendorPlateDbId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "vendorPlateDbId" + "\\}", apiInvoker.escapeString(vendorPlateDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((VendorPlateResponse) ApiInvoker.deserialize(localVarResponse,  "", VendorPlateResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Vendor specification
  *  Defines the plate format specification for the vendor. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/vendor\&quot;&gt; test-server.brapi.org/brapi/v1/vendor/specifications&lt;/a&gt;
   * @return VendorSpecificationResponse
  */
  public VendorSpecificationResponse vendorSpecificationsGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/vendor/specifications";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (VendorSpecificationResponse) ApiInvoker.deserialize(localVarResponse, "", VendorSpecificationResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Vendor specification
   *  Defines the plate format specification for the vendor. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/vendor\&quot;&gt; test-server.brapi.org/brapi/v1/vendor/specifications&lt;/a&gt;

  */
  public void vendorSpecificationsGet (final Response.Listener<VendorSpecificationResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/vendor/specifications".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((VendorSpecificationResponse) ApiInvoker.deserialize(localVarResponse,  "", VendorSpecificationResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
