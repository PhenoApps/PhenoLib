/**
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.NewSampleDbId;
import io.swagger.client.model.Sample;
import io.swagger.client.model.SampleResponse;
import io.swagger.client.model.SampleSearchRequest;
import io.swagger.client.model.SamplesResponse;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class SamplesApi {
  String basePath = "https://test-server.brapi.org/brapi/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Add a sample
  * Call to register the event of a sample being taken. Sample ID is assigned as a result of the operation and returned in response. 
   * @param sample 
   * @return NewSampleDbId
  */
  public NewSampleDbId samplesPut (Sample sample) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = sample;

    // create path and map variables
    String path = "/samples";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (NewSampleDbId) ApiInvoker.deserialize(localVarResponse, "", NewSampleDbId.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add a sample
   * Call to register the event of a sample being taken. Sample ID is assigned as a result of the operation and returned in response. 
   * @param sample 
  */
  public void samplesPut (Sample sample, final Response.Listener<NewSampleDbId> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = sample;


    // create path and map variables
    String path = "/samples".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((NewSampleDbId) ApiInvoker.deserialize(localVarResponse,  "", NewSampleDbId.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Sample
  *  Used to retrieve the details of a single Sample from a Sample Tracking system. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/samples\&quot;&gt; test-server.brapi.org/brapi/v1/samples/{sampleDbId}&lt;/a&gt;
   * @param sampleDbId the internal DB id for a sample
   * @return SampleResponse
  */
  public SampleResponse samplesSampleDbIdGet (String sampleDbId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'sampleDbId' is set
    if (sampleDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sampleDbId' when calling samplesSampleDbIdGet",
        new ApiException(400, "Missing the required parameter 'sampleDbId' when calling samplesSampleDbIdGet"));
    }

    // create path and map variables
    String path = "/samples/{sampleDbId}".replaceAll("\\{" + "sampleDbId" + "\\}", apiInvoker.escapeString(sampleDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SampleResponse) ApiInvoker.deserialize(localVarResponse, "", SampleResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Sample
   *  Used to retrieve the details of a single Sample from a Sample Tracking system. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/samples\&quot;&gt; test-server.brapi.org/brapi/v1/samples/{sampleDbId}&lt;/a&gt;
   * @param sampleDbId the internal DB id for a sample
  */
  public void samplesSampleDbIdGet (String sampleDbId, final Response.Listener<SampleResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'sampleDbId' is set
    if (sampleDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sampleDbId' when calling samplesSampleDbIdGet",
        new ApiException(400, "Missing the required parameter 'sampleDbId' when calling samplesSampleDbIdGet"));
    }

    // create path and map variables
    String path = "/samples/{sampleDbId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "sampleDbId" + "\\}", apiInvoker.escapeString(sampleDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SampleResponse) ApiInvoker.deserialize(localVarResponse,  "", SampleResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Sample Search
  *  Used to retrieve list of Samples from a Sample Tracking system based on some search criteria. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/samples\&quot;&gt; test-server.brapi.org/brapi/v1/samples-search&lt;/a&gt;
   * @param sampleDbId the internal DB id for a sample
   * @param observationUnitDbId the internal DB id for an observation unit where a sample was taken from
   * @param plateDbId the internal DB id for a plate of samples
   * @param germplasmDbId the internal DB id for a germplasm
   * @param pageSize The size of the pages to be returned. Default is 1000.
   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is 0.
   * @return SamplesResponse
  */
  public SamplesResponse samplesSearchGet (String sampleDbId, String observationUnitDbId, String plateDbId, String germplasmDbId, Integer pageSize, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/samples-search";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sampleDbId", sampleDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "observationUnitDbId", observationUnitDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "plateDbId", plateDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "germplasmDbId", germplasmDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SamplesResponse) ApiInvoker.deserialize(localVarResponse, "", SamplesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Sample Search
   *  Used to retrieve list of Samples from a Sample Tracking system based on some search criteria. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/samples\&quot;&gt; test-server.brapi.org/brapi/v1/samples-search&lt;/a&gt;
   * @param sampleDbId the internal DB id for a sample   * @param observationUnitDbId the internal DB id for an observation unit where a sample was taken from   * @param plateDbId the internal DB id for a plate of samples   * @param germplasmDbId the internal DB id for a germplasm   * @param pageSize The size of the pages to be returned. Default is 1000.   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is 0.
  */
  public void samplesSearchGet (String sampleDbId, String observationUnitDbId, String plateDbId, String germplasmDbId, Integer pageSize, Integer page, final Response.Listener<SamplesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/samples-search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "sampleDbId", sampleDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "observationUnitDbId", observationUnitDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "plateDbId", plateDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "germplasmDbId", germplasmDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SamplesResponse) ApiInvoker.deserialize(localVarResponse,  "", SamplesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Post Sample Search
  *  Used to retrieve list of Samples from a Sample Tracking system based on some search criteria. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/samples\&quot;&gt; test-server.brapi.org/brapi/v1/samples-search&lt;/a&gt;
   * @param sampleSearch 
   * @return SamplesResponse
  */
  public SamplesResponse samplesSearchPost (SampleSearchRequest sampleSearch) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = sampleSearch;

    // create path and map variables
    String path = "/samples-search";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SamplesResponse) ApiInvoker.deserialize(localVarResponse, "", SamplesResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Post Sample Search
   *  Used to retrieve list of Samples from a Sample Tracking system based on some search criteria. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/samples\&quot;&gt; test-server.brapi.org/brapi/v1/samples-search&lt;/a&gt;
   * @param sampleSearch 
  */
  public void samplesSearchPost (SampleSearchRequest sampleSearch, final Response.Listener<SamplesResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = sampleSearch;


    // create path and map variables
    String path = "/samples-search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SamplesResponse) ApiInvoker.deserialize(localVarResponse,  "", SamplesResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
