/**
 * BrAPI
 * The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.  <strong>General Reference Documentation</strong> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md\">URL Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md\">Response Structure</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md\">Date/Time Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md\">Location Encoding</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md\">Error Handling</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md\">Search Services</a> <a href=\"https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md\">Asynchronous Processing</a>
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.BreedingMethodResponse;
import io.swagger.client.model.BreedingMethodsResponse;
import io.swagger.client.model.GermplasmAttributeListResponse;
import io.swagger.client.model.GermplasmMarkerprofilesListResponse;
import io.swagger.client.model.GermplasmResponse;
import io.swagger.client.model.GermplasmResponse1;
import io.swagger.client.model.GermplasmSearchRequest;
import io.swagger.client.model.GermplasmSummaryListResponse;
import io.swagger.client.model.PedigreeResponse;
import io.swagger.client.model.ProgenyResponse;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class GermplasmApi {
  String basePath = "https://test-server.brapi.org/brapi/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * GET specific breeding method details
  *   &lt;a&gt;example.com/brapi/v1/breedingmethods/{breedingMethodDbId}&lt;/a&gt;
   * @param breedingMethodDbId Internal database identifier for a breeding method
   * @return BreedingMethodResponse
  */
  public BreedingMethodResponse breedingmethodsBreedingMethodDbIdGet (String breedingMethodDbId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'breedingMethodDbId' is set
    if (breedingMethodDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'breedingMethodDbId' when calling breedingmethodsBreedingMethodDbIdGet",
        new ApiException(400, "Missing the required parameter 'breedingMethodDbId' when calling breedingmethodsBreedingMethodDbIdGet"));
    }

    // create path and map variables
    String path = "/breedingmethods/{breedingMethodDbId}".replaceAll("\\{" + "breedingMethodDbId" + "\\}", apiInvoker.escapeString(breedingMethodDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BreedingMethodResponse) ApiInvoker.deserialize(localVarResponse, "", BreedingMethodResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GET specific breeding method details
   *   &lt;a&gt;example.com/brapi/v1/breedingmethods/{breedingMethodDbId}&lt;/a&gt;
   * @param breedingMethodDbId Internal database identifier for a breeding method
  */
  public void breedingmethodsBreedingMethodDbIdGet (String breedingMethodDbId, final Response.Listener<BreedingMethodResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'breedingMethodDbId' is set
    if (breedingMethodDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'breedingMethodDbId' when calling breedingmethodsBreedingMethodDbIdGet",
        new ApiException(400, "Missing the required parameter 'breedingMethodDbId' when calling breedingmethodsBreedingMethodDbIdGet"));
    }

    // create path and map variables
    String path = "/breedingmethods/{breedingMethodDbId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "breedingMethodDbId" + "\\}", apiInvoker.escapeString(breedingMethodDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BreedingMethodResponse) ApiInvoker.deserialize(localVarResponse,  "", BreedingMethodResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * GET List of Breeding Methods
  *  Scope: Germplasm Get the list of germplasm breeding methods available in a system. &lt;a&gt;example.com/brapi/v1/breedingmethods&lt;/a&gt;
   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.
   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
   * @return BreedingMethodsResponse
  */
  public BreedingMethodsResponse breedingmethodsGet (Integer pageSize, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/breedingmethods";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BreedingMethodsResponse) ApiInvoker.deserialize(localVarResponse, "", BreedingMethodsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GET List of Breeding Methods
   *  Scope: Germplasm Get the list of germplasm breeding methods available in a system. &lt;a&gt;example.com/brapi/v1/breedingmethods&lt;/a&gt;
   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
  */
  public void breedingmethodsGet (Integer pageSize, Integer page, final Response.Listener<BreedingMethodsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/breedingmethods".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BreedingMethodsResponse) ApiInvoker.deserialize(localVarResponse,  "", BreedingMethodsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Germplasm attribute values
  * Values for all attributes by default.  &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/germplasm\&quot;&gt; test-server.brapi.org/brapi/v1/germplasm/{germplasmDbId}/attributes&lt;/a&gt;
   * @param germplasmDbId The germplasm characterized
   * @param attributeDbIds Restrict the response to only the listed attributeDbIds.
   * @param attributeList **Deprecated** Use \&quot;attributeDbIds\&quot; instead
   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.
   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
   * @return GermplasmAttributeListResponse
  */
  public GermplasmAttributeListResponse germplasmGermplasmDbIdAttributesGet (String germplasmDbId, List<String> attributeDbIds, List<String> attributeList, Integer pageSize, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'germplasmDbId' is set
    if (germplasmDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdAttributesGet",
        new ApiException(400, "Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdAttributesGet"));
    }

    // create path and map variables
    String path = "/germplasm/{germplasmDbId}/attributes".replaceAll("\\{" + "germplasmDbId" + "\\}", apiInvoker.escapeString(germplasmDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "attributeDbIds", attributeDbIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "attributeList", attributeList));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GermplasmAttributeListResponse) ApiInvoker.deserialize(localVarResponse, "", GermplasmAttributeListResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Germplasm attribute values
   * Values for all attributes by default.  &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/germplasm\&quot;&gt; test-server.brapi.org/brapi/v1/germplasm/{germplasmDbId}/attributes&lt;/a&gt;
   * @param germplasmDbId The germplasm characterized   * @param attributeDbIds Restrict the response to only the listed attributeDbIds.   * @param attributeList **Deprecated** Use \&quot;attributeDbIds\&quot; instead   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
  */
  public void germplasmGermplasmDbIdAttributesGet (String germplasmDbId, List<String> attributeDbIds, List<String> attributeList, Integer pageSize, Integer page, final Response.Listener<GermplasmAttributeListResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'germplasmDbId' is set
    if (germplasmDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdAttributesGet",
        new ApiException(400, "Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdAttributesGet"));
    }

    // create path and map variables
    String path = "/germplasm/{germplasmDbId}/attributes".replaceAll("\\{format\\}","json").replaceAll("\\{" + "germplasmDbId" + "\\}", apiInvoker.escapeString(germplasmDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "attributeDbIds", attributeDbIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "attributeList", attributeList));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GermplasmAttributeListResponse) ApiInvoker.deserialize(localVarResponse,  "", GermplasmAttributeListResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Germplasm search by germplasmDbId
  *  Scope: CORE. Status: ACCEPTED. Implementation target date: PAG2016 Implemented by: Tripal Brapi module, Germinate, Cassavabase Note: Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD]. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/germplasm\&quot;&gt; test-server.brapi.org/brapi/v1/germplasm/{germplasmDbId}&lt;/a&gt; 
   * @param germplasmDbId The internal id of the germplasm
   * @return GermplasmResponse1
  */
  public GermplasmResponse1 germplasmGermplasmDbIdGet (String germplasmDbId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'germplasmDbId' is set
    if (germplasmDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdGet",
        new ApiException(400, "Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdGet"));
    }

    // create path and map variables
    String path = "/germplasm/{germplasmDbId}".replaceAll("\\{" + "germplasmDbId" + "\\}", apiInvoker.escapeString(germplasmDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GermplasmResponse1) ApiInvoker.deserialize(localVarResponse, "", GermplasmResponse1.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Germplasm search by germplasmDbId
   *  Scope: CORE. Status: ACCEPTED. Implementation target date: PAG2016 Implemented by: Tripal Brapi module, Germinate, Cassavabase Note: Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD]. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/germplasm\&quot;&gt; test-server.brapi.org/brapi/v1/germplasm/{germplasmDbId}&lt;/a&gt; 
   * @param germplasmDbId The internal id of the germplasm
  */
  public void germplasmGermplasmDbIdGet (String germplasmDbId, final Response.Listener<GermplasmResponse1> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'germplasmDbId' is set
    if (germplasmDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdGet",
        new ApiException(400, "Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdGet"));
    }

    // create path and map variables
    String path = "/germplasm/{germplasmDbId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "germplasmDbId" + "\\}", apiInvoker.escapeString(germplasmDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GermplasmResponse1) ApiInvoker.deserialize(localVarResponse,  "", GermplasmResponse1.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Markerprofiles by germplasmDbId
  *  Retrieve the markerProfileDbIds for a given Germplasm ID Scope: GENOTYPING. Status: ACCEPTED. Implementation target date: PAG2016 Implemented by: Germinate, Cassavabase &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/germplasm\&quot;&gt; test-server.brapi.org/brapi/v1/germplasm/{germplasmDbId}/markerprofiles&lt;/a&gt; 
   * @param germplasmDbId the internal id of the germplasm
   * @return GermplasmMarkerprofilesListResponse
  */
  public GermplasmMarkerprofilesListResponse germplasmGermplasmDbIdMarkerprofilesGet (String germplasmDbId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'germplasmDbId' is set
    if (germplasmDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdMarkerprofilesGet",
        new ApiException(400, "Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdMarkerprofilesGet"));
    }

    // create path and map variables
    String path = "/germplasm/{germplasmDbId}/markerprofiles".replaceAll("\\{" + "germplasmDbId" + "\\}", apiInvoker.escapeString(germplasmDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GermplasmMarkerprofilesListResponse) ApiInvoker.deserialize(localVarResponse, "", GermplasmMarkerprofilesListResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Markerprofiles by germplasmDbId
   *  Retrieve the markerProfileDbIds for a given Germplasm ID Scope: GENOTYPING. Status: ACCEPTED. Implementation target date: PAG2016 Implemented by: Germinate, Cassavabase &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/germplasm\&quot;&gt; test-server.brapi.org/brapi/v1/germplasm/{germplasmDbId}/markerprofiles&lt;/a&gt; 
   * @param germplasmDbId the internal id of the germplasm
  */
  public void germplasmGermplasmDbIdMarkerprofilesGet (String germplasmDbId, final Response.Listener<GermplasmMarkerprofilesListResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'germplasmDbId' is set
    if (germplasmDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdMarkerprofilesGet",
        new ApiException(400, "Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdMarkerprofilesGet"));
    }

    // create path and map variables
    String path = "/germplasm/{germplasmDbId}/markerprofiles".replaceAll("\\{format\\}","json").replaceAll("\\{" + "germplasmDbId" + "\\}", apiInvoker.escapeString(germplasmDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GermplasmMarkerprofilesListResponse) ApiInvoker.deserialize(localVarResponse,  "", GermplasmMarkerprofilesListResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Germplasm pedigree by id
  *  Scope: CORE. Status: ACCEPTED. Implementation target date: PAG2016 Implemented by: Germinate, Tripal Brapi Module, Cassavabase (without notation option) (http://wheat.pw.usda.gov/ggpages/gopher/administration/Template%20for%20Germplasm%20records.html) or [Lamacraft] (http://link.springer.com/article/10.1007%2FBF00021556). &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/germplasm\&quot;&gt; test-server.brapi.org/brapi/v1/germplasm/{germplasmDbId}/pedigree&lt;/a&gt; 
   * @param germplasmDbId the internal id of the germplasm
   * @param notation text representation of the pedigree
   * @param includeSiblings include array of siblings in response
   * @return PedigreeResponse
  */
  public PedigreeResponse germplasmGermplasmDbIdPedigreeGet (String germplasmDbId, String notation, Boolean includeSiblings) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'germplasmDbId' is set
    if (germplasmDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdPedigreeGet",
        new ApiException(400, "Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdPedigreeGet"));
    }

    // create path and map variables
    String path = "/germplasm/{germplasmDbId}/pedigree".replaceAll("\\{" + "germplasmDbId" + "\\}", apiInvoker.escapeString(germplasmDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "notation", notation));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "includeSiblings", includeSiblings));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PedigreeResponse) ApiInvoker.deserialize(localVarResponse, "", PedigreeResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Germplasm pedigree by id
   *  Scope: CORE. Status: ACCEPTED. Implementation target date: PAG2016 Implemented by: Germinate, Tripal Brapi Module, Cassavabase (without notation option) (http://wheat.pw.usda.gov/ggpages/gopher/administration/Template%20for%20Germplasm%20records.html) or [Lamacraft] (http://link.springer.com/article/10.1007%2FBF00021556). &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/germplasm\&quot;&gt; test-server.brapi.org/brapi/v1/germplasm/{germplasmDbId}/pedigree&lt;/a&gt; 
   * @param germplasmDbId the internal id of the germplasm   * @param notation text representation of the pedigree   * @param includeSiblings include array of siblings in response
  */
  public void germplasmGermplasmDbIdPedigreeGet (String germplasmDbId, String notation, Boolean includeSiblings, final Response.Listener<PedigreeResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'germplasmDbId' is set
    if (germplasmDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdPedigreeGet",
        new ApiException(400, "Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdPedigreeGet"));
    }

    // create path and map variables
    String path = "/germplasm/{germplasmDbId}/pedigree".replaceAll("\\{format\\}","json").replaceAll("\\{" + "germplasmDbId" + "\\}", apiInvoker.escapeString(germplasmDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "notation", notation));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "includeSiblings", includeSiblings));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PedigreeResponse) ApiInvoker.deserialize(localVarResponse,  "", PedigreeResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Germplasm pedigree by id
  *  Scope: Germplasm Get the germplasmDbIds for all the Progeny of a particular germplasm. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/germplasm\&quot;&gt; test-server.brapi.org/brapi/v1/germplasm/{germplasmDbId}/progeny&lt;/a&gt; 
   * @param germplasmDbId the internal id of the germplasm
   * @return ProgenyResponse
  */
  public ProgenyResponse germplasmGermplasmDbIdProgenyGet (String germplasmDbId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'germplasmDbId' is set
    if (germplasmDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdProgenyGet",
        new ApiException(400, "Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdProgenyGet"));
    }

    // create path and map variables
    String path = "/germplasm/{germplasmDbId}/progeny".replaceAll("\\{" + "germplasmDbId" + "\\}", apiInvoker.escapeString(germplasmDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProgenyResponse) ApiInvoker.deserialize(localVarResponse, "", ProgenyResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Germplasm pedigree by id
   *  Scope: Germplasm Get the germplasmDbIds for all the Progeny of a particular germplasm. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/germplasm\&quot;&gt; test-server.brapi.org/brapi/v1/germplasm/{germplasmDbId}/progeny&lt;/a&gt; 
   * @param germplasmDbId the internal id of the germplasm
  */
  public void germplasmGermplasmDbIdProgenyGet (String germplasmDbId, final Response.Listener<ProgenyResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'germplasmDbId' is set
    if (germplasmDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdProgenyGet",
        new ApiException(400, "Missing the required parameter 'germplasmDbId' when calling germplasmGermplasmDbIdProgenyGet"));
    }

    // create path and map variables
    String path = "/germplasm/{germplasmDbId}/progeny".replaceAll("\\{format\\}","json").replaceAll("\\{" + "germplasmDbId" + "\\}", apiInvoker.escapeString(germplasmDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProgenyResponse) ApiInvoker.deserialize(localVarResponse,  "", ProgenyResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Germplasm search through GET
  *  Implemented by: GnpIS, Germinate (GET only) See &lt;a href&#x3D;\&quot;#introduction/search-services\&quot;&gt;Search Services&lt;/a&gt; for additional implementation details. Notes: The germplasm and germplasm MCPD calls were merged.  The MCPD fields are optional and indicated as such with the [MCPD] prefix in the description field of the \&quot;Response data types\&quot; table. Please use the \&quot;features\&quot; hash of the \&quot;calls\&quot; call to communicate with clients as to whether MCPD is supported by your implementation. Addresses these needs: 1. General germplasm search mechanism that accepts POST for complex queries 2. possibility to search germplasm by more parameters than those allowed by the existing germplasm search 3. possibility to get MCPD details by PUID rather than dbId Use GET when parameter size is less than 2K bytes. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/germplasm\&quot;&gt; test-server.brapi.org/brapi/v1/germplasm-search&lt;/a&gt; 
   * @param germplasmPUI Permanent unique identifier (DOI, URI, etc.)
   * @param germplasmDbId Internal database identifier
   * @param germplasmName Name of the germplasm
   * @param commonCropName The common crop name related to this germplasm
   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.
   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
   * @return GermplasmResponse
  */
  public GermplasmResponse germplasmSearchGet (String germplasmPUI, String germplasmDbId, String germplasmName, String commonCropName, Integer pageSize, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/germplasm-search";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "germplasmPUI", germplasmPUI));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "germplasmDbId", germplasmDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "germplasmName", germplasmName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "commonCropName", commonCropName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GermplasmResponse) ApiInvoker.deserialize(localVarResponse, "", GermplasmResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Germplasm search through GET
   *  Implemented by: GnpIS, Germinate (GET only) See &lt;a href&#x3D;\&quot;#introduction/search-services\&quot;&gt;Search Services&lt;/a&gt; for additional implementation details. Notes: The germplasm and germplasm MCPD calls were merged.  The MCPD fields are optional and indicated as such with the [MCPD] prefix in the description field of the \&quot;Response data types\&quot; table. Please use the \&quot;features\&quot; hash of the \&quot;calls\&quot; call to communicate with clients as to whether MCPD is supported by your implementation. Addresses these needs: 1. General germplasm search mechanism that accepts POST for complex queries 2. possibility to search germplasm by more parameters than those allowed by the existing germplasm search 3. possibility to get MCPD details by PUID rather than dbId Use GET when parameter size is less than 2K bytes. &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/germplasm\&quot;&gt; test-server.brapi.org/brapi/v1/germplasm-search&lt;/a&gt; 
   * @param germplasmPUI Permanent unique identifier (DOI, URI, etc.)   * @param germplasmDbId Internal database identifier   * @param germplasmName Name of the germplasm   * @param commonCropName The common crop name related to this germplasm   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
  */
  public void germplasmSearchGet (String germplasmPUI, String germplasmDbId, String germplasmName, String commonCropName, Integer pageSize, Integer page, final Response.Listener<GermplasmResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/germplasm-search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "germplasmPUI", germplasmPUI));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "germplasmDbId", germplasmDbId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "germplasmName", germplasmName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "commonCropName", commonCropName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GermplasmResponse) ApiInvoker.deserialize(localVarResponse,  "", GermplasmResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Germplasm search through POST
  *  Implemented by: GnpIS, Germinate (GET only) See &lt;a href&#x3D;\&quot;#introduction/search-services\&quot;&gt;Search Services&lt;/a&gt; for additional implementation details. Notes: The germplasm and germplasm MCPD calls were merged.  The MCPD fields are optional and indicated as such with the [MCPD] prefix in the description field of the \&quot;Response data types\&quot; table. Please use the \&quot;features\&quot; hash of the \&quot;calls\&quot; call to communicate with clients as to whether MCPD is supported by your implementation. Addresses these needs: 1. General germplasm search mechanism that accepts POST for complex queries 2. possibility to search germplasm by more parameters than those allowed by the existing germplasm search 3. possibility to get MCPD details by PUID rather than dbId Use POST for large queries (&gt;2K bytes). 
   * @param body 
   * @return GermplasmResponse
  */
  public GermplasmResponse germplasmSearchPost (GermplasmSearchRequest body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;

    // create path and map variables
    String path = "/germplasm-search";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GermplasmResponse) ApiInvoker.deserialize(localVarResponse, "", GermplasmResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Germplasm search through POST
   *  Implemented by: GnpIS, Germinate (GET only) See &lt;a href&#x3D;\&quot;#introduction/search-services\&quot;&gt;Search Services&lt;/a&gt; for additional implementation details. Notes: The germplasm and germplasm MCPD calls were merged.  The MCPD fields are optional and indicated as such with the [MCPD] prefix in the description field of the \&quot;Response data types\&quot; table. Please use the \&quot;features\&quot; hash of the \&quot;calls\&quot; call to communicate with clients as to whether MCPD is supported by your implementation. Addresses these needs: 1. General germplasm search mechanism that accepts POST for complex queries 2. possibility to search germplasm by more parameters than those allowed by the existing germplasm search 3. possibility to get MCPD details by PUID rather than dbId Use POST for large queries (&gt;2K bytes). 
   * @param body 
  */
  public void germplasmSearchPost (GermplasmSearchRequest body, final Response.Listener<GermplasmResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;


    // create path and map variables
    String path = "/germplasm-search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GermplasmResponse) ApiInvoker.deserialize(localVarResponse,  "", GermplasmResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Study Germplasm Details
  *  Scope: PHENOTYPING &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/germplasm&lt;/a&gt;
   * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric.
   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.
   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
   * @return GermplasmSummaryListResponse
  */
  public GermplasmSummaryListResponse studiesStudyDbIdGermplasmGet (String studyDbId, Integer pageSize, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdGermplasmGet",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdGermplasmGet"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/germplasm".replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GermplasmSummaryListResponse) ApiInvoker.deserialize(localVarResponse, "", GermplasmSummaryListResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Study Germplasm Details
   *  Scope: PHENOTYPING &lt;a href&#x3D;\&quot;https://test-server.brapi.org/brapi/v1/studies\&quot;&gt; test-server.brapi.org/brapi/v1/studies/{studyDbId}/germplasm&lt;/a&gt;
   * @param studyDbId Identifier of the study. Usually a number, could be alphanumeric.   * @param pageSize The size of the pages to be returned. Default is &#x60;1000&#x60;.   * @param page Which result page is requested. The page indexing starts at 0 (the first page is &#39;page&#39;&#x3D; 0). Default is &#x60;0&#x60;.
  */
  public void studiesStudyDbIdGermplasmGet (String studyDbId, Integer pageSize, Integer page, final Response.Listener<GermplasmSummaryListResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'studyDbId' is set
    if (studyDbId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyDbId' when calling studiesStudyDbIdGermplasmGet",
        new ApiException(400, "Missing the required parameter 'studyDbId' when calling studiesStudyDbIdGermplasmGet"));
    }

    // create path and map variables
    String path = "/studies/{studyDbId}/germplasm".replaceAll("\\{format\\}","json").replaceAll("\\{" + "studyDbId" + "\\}", apiInvoker.escapeString(studyDbId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GermplasmSummaryListResponse) ApiInvoker.deserialize(localVarResponse,  "", GermplasmSummaryListResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
